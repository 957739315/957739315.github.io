<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019-07-29</title>
      <link href="/2019/07/29/2019-07-29/"/>
      <url>/2019/07/29/2019-07-29/</url>
      
        <content type="html"><![CDATA[<p><strong>React v16.7.0-alpha新特性Hook</strong><br>Hook就是使得在 react function组件可以使用生命周期函数；<br>State Hook 可以使用 setState；<br>Effect Hook 可以使用 componentDidMount 和 componentDidUpdate；<br>自定义 Hook；<br>Hook 规则；<br>使用 useEffect() 实现 componentWillUnmount；<br>React.memo 阻断因父组件而不断更新子组件，实现子组件按需更新；<br>useCall(()=&gt;{}, []) 监听变量的值变化，当发生变化时执行函数；<br>useReducer(reducer, []) 使用 redux 封装 reducer；<br>immer、use-immer  实现深度克隆；<br>useContext 、static contextType实现跨组件传值；<br>setState 注意点。</p><a id="more"></a><p>学习参考视频：<a href="https://www.bilibili.com/video/av58388535/?p=1" target="_blank" rel="noopener">React 进阶 2 react-hook</a></p><h2 id="升级react版本"><a href="#升级react版本" class="headerlink" title="升级react版本"></a>升级react版本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react@next react-dom@next</span><br></pre></td></tr></table></figure><h2 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h2><ul><li><code>useState()</code>可以使用多次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we'll call "count"</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//  等同于</span></span><br><span class="line"><span class="comment">//   this.state=&#123;</span></span><br><span class="line"><span class="comment">//       count:0</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   this.setCount=(num)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//       this.setState(&#123;</span></span><br><span class="line"><span class="comment">//           count:num</span></span><br><span class="line"><span class="comment">//       &#125;)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  可以多种数据类型</span></span><br><span class="line"><span class="comment">//   const [age, setAge] = useState(42);</span></span><br><span class="line"><span class="comment">//   const [fruit, setFruit] = useState('banana');</span></span><br><span class="line"><span class="comment">//   const [todos, setTodos] = useState([&#123; text: 'Learn Hooks' &#125;]);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h2><ul><li><code>useEffect()</code>可以使用多次</li><li>从上到下执行，可以在函数内部调用 fetch</li><li>根据第二个参数空数组来控制 componentDidUpdate 的更新</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于 componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新浏览器的标签名</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`<span class="subst">$&#123;name&#125;</span> clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;,[count]); </span><br><span class="line">  <span class="comment">// 进行性能优化</span></span><br><span class="line">  <span class="comment">// 第二个参数表示，</span></span><br><span class="line">  <span class="comment">// 1. 在componentDidMount情况下，name 和 count 都会被执行</span></span><br><span class="line">  <span class="comment">// 2. 在componentDidUpdate情况下，</span></span><br><span class="line">  <span class="comment">//    当count数据发生变化时执行，否则不执行</span></span><br><span class="line">  <span class="comment">//    当name数据发生变化时不会被执行</span></span><br><span class="line">  <span class="comment">// 如果第二个参数为空数组[]，则表示componentDidMount执行，但是componentDidUpdate变成无效了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>useEffect()</code>内写异步请求，当参数发生变化时可以重新发送请求，类似于数据驱动事件（render()是数据驱动视图）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example=<span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [person, setPerson] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">const</span> res=<span class="keyword">await</span> fetch(<span class="string">"https://randomuser.me/api/"</span>);</span><br><span class="line">      <span class="keyword">const</span> data=<span class="keyword">await</span> res.json();</span><br><span class="line">      <span class="keyword">const</span> [item]=data.results;</span><br><span class="line">      setPerson(item);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">  &#125;,[count]);</span><br><span class="line">  <span class="comment">// 第二个参数如果不写，会陷入无限循环，因为count变化导致执行函数体，函数体内又因为person发生变化，又再一次执行函数体，所以陷入无限循环，person值一直在改变</span></span><br><span class="line">  <span class="comment">// 如果第二个参数[count]，则只有点击按钮才会进行更改姓名</span></span><br><span class="line">  <span class="comment">// 如果第二个参数[]为空，则挂载后不会发生任何变化，person值不会再次改变</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &#123;loading ? &lt;div&gt;loading...&lt;/div&gt; : &lt;div&gt;&#123;person.name.first&#125;&lt;/div&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Example;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>PS:</strong> <code>setState(param1, param2)</code> 第一个参数是要更改的数据，第二个参数是回调函数，表示数据发生变化时，调用回调函数，那么可以把这个回调函数写入 <code>useEffect()</code> ，这样当监听到数据发生变化时， <code>useEffect()</code> 会被自动执行。</p></blockquote><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取出 Hook 逻辑，封装成一个自定义的 Hook</span></span><br><span class="line"><span class="keyword">const</span> useFetch=<span class="function">(<span class="params">url, count</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">const</span> data=<span class="keyword">await</span> res.json();</span><br><span class="line">    <span class="keyword">const</span> item=data.results[<span class="number">0</span>].name.first;</span><br><span class="line">    setData(item);</span><br><span class="line">    setLoading(<span class="literal">false</span>);</span><br><span class="line">  &#125;,count);</span><br><span class="line">  <span class="keyword">return</span> &#123;data,loading&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example=<span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; data, loading &#125; = useFetch(<span class="string">"https://randomuser.me/api/"</span>, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &#123;loading ? &lt;div&gt;loading...&lt;/div&gt; : &lt;div&gt;&#123;data&#125;&lt;/div&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Example;</span></span><br></pre></td></tr></table></figure><h2 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a>Hook 规则</h2><ul><li>不要在循环、条件判断、嵌套函数中调用 Hook；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 不能在条件判断中使用 Hook</span></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span>(count === <span class="number">0</span>)&#123;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>要在 React function UI组件中调用</li><li>可在自定义的 Hooks 中调用 Hooks</li></ul><h2 id="使用-useEffect-实现-componentWillUnmount"><a href="#使用-useEffect-实现-componentWillUnmount" class="headerlink" title="使用 useEffect() 实现 componentWillUnmount"></a>使用 useEffect() 实现 componentWillUnmount</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例：实现点击清除一个定时器</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyAPI = &#123;</span><br><span class="line">    count:<span class="number">0</span>,</span><br><span class="line">    subscribe(cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count += <span class="number">1</span>;</span><br><span class="line">            cb(<span class="keyword">this</span>.count);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    unsubscribe()&#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.intervalId);</span><br><span class="line">        <span class="keyword">this</span>.reset();</span><br><span class="line">    &#125;,</span><br><span class="line">    reset()&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UseEffectDemo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        project: <span class="string">'Foo'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; project &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button</span><br><span class="line">                  onClick=&#123;()=&gt;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                        project:project === <span class="string">'Foo'</span> ? <span class="string">'Bar'</span> : <span class="string">'Foo'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    Change Project</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br /</span>&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    project === <span class="string">'Foo'</span>? &lt;UseEffectComponent project = &#123;project&#125; /&gt; : 'Bar'</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseEffectComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        timeOnProject: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        MyAPI.subscribe(timeOnProject = &gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;timeOnProject&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidUpdate(prevProps)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.project !== prevProps.project)&#123;</span><br><span class="line">            MyAPI.unsubscribe();</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">timeOnProject</span>:<span class="number">0</span>&#125;);</span><br><span class="line">            MyAPI.subscribe(timeOnProject = &gt;&#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;timeOnProject&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        MyAPI.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;project&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> &#123;timeOnProject&#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;Project: &#123;project&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">                    Time on project: &lt;br /</span>&gt;</span><br><span class="line">                    &#123;timeOnProject&#125;</span><br><span class="line">                &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>useState useEffect</code>进行更改，实现<code>componentWillUnmount</code> 在<code>useEffect</code> 返回箭头函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyAPI = &#123;</span><br><span class="line">    count:<span class="number">0</span>,</span><br><span class="line">    subscribe(cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count += <span class="number">1</span>;</span><br><span class="line">            cb(<span class="keyword">this</span>.count);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    unsubscribe()&#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.intervalId);</span><br><span class="line">        <span class="keyword">this</span>.reset();</span><br><span class="line">    &#125;,</span><br><span class="line">    reset()&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UseEffectDemo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        project: <span class="string">'Foo'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; project &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button</span><br><span class="line">                  onClick=&#123;()=&gt;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                        project:project === <span class="string">'Foo'</span> ? <span class="string">'Bar'</span> : <span class="string">'Foo'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    Change Project</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br /</span>&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    project === <span class="string">'Foo'</span>? &lt;UseEffectComponent project = &#123;project&#125; /&gt; : 'Bar'</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UseEffectComponent = <span class="function">(<span class="params">props</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;project&#125; = props;</span><br><span class="line">    <span class="keyword">const</span> [timeOnProject,setTimeOnProject]=useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        MyAPI.subscribe(timeOnProject = &gt; &#123;</span><br><span class="line">            setTimeOnProject(timeOnProject);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            MyAPI.unsubscribe();</span><br><span class="line">            setTimeOnProject(<span class="number">0</span>);  <span class="comment">// 清空计时器为0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[project]);  <span class="comment">// 当project发生变化时，执行一次此函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;Project: &#123;project&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">                Time on project: &lt;br /</span>&gt;</span><br><span class="line">                &#123;timeOnProject&#125;</span><br><span class="line">            &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><ul><li><code>react 16.6.0</code> 之后版本才有，主要用于性能优化</li><li>接收一个 <code>react function</code> 组件</li><li>当子组件受到父组件的影响，会被不断的渲染，套一层<code>React.memo</code>，使其只有当值发生改变时才进行渲染</li><li>常规 <code>Component</code> 没有<code>shouldComponentUpdate()</code>（决定一个组件是否被渲染，比较 state 和 props 是否发生变化）, <code>PureComponent</code> 纯组件（即UI组件）有<code>shouldComponentUpdate()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoDemo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.time.toString()&#125;</span><br><span class="line">                &lt;Child seconds=&#123;<span class="number">1</span>&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default MemoDemo;</span></span><br></pre></td></tr></table></figure><blockquote><p> <strong>bug</strong>: 此组件会不断的进行渲染，这是不好的，<br> <strong>两种解决方法：</strong></p><ol><li>将组件 extends Component 改为 extends PureComponent，因为 PureComponent 会实现一个简单的生命周期函数 shouldComponentUpdate()</li><li>在组件内添加一个函数 shouldComponentUpdate(nextProps, nextState) 判断 state 和 props 是否发生改变，再决定是否渲染</li></ol></blockquote><blockquote><p>对于 React function UI组件，没有 PureComponent 的  shouldComponentUpdate 生命周期函数，所以需要使用 useMeno 进行包裹</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> Child =<span class="function">(<span class="params">&#123;seconds&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child rendering"</span>);</span><br><span class="line">    <span class="keyword">return</span> &lt;p&gt;I am updating every &#123;seconds&#125; seconds,&lt;/p&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//export default Child; // 受父组件影响，子组件会被不断的渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(Child); <span class="comment">// 当子组件 state 和 props 发生改变才会被渲染</span></span><br></pre></td></tr></table></figure><h2 id="useCall-gt"><a href="#useCall-gt" class="headerlink" title="useCall(()=&gt;{}, [])"></a>useCall(()=&gt;{}, [])</h2><p>第一个参数是一个函数，当数组为空时，执行一次函数后不会再次执行<br>第二个参数是数组，当数组中的元素值发生变化，执行一次函数</p><h2 id="useReducer-reducer"><a href="#useReducer-reducer" class="headerlink" title="useReducer(reducer, [])"></a>useReducer(reducer, [])</h2><p>类似 react-redux 功能，reducer 是 redux 中的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer=<span class="function">(<span class="params">state, action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"XXX"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"XXX"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> [todos, dispatch]=useReducer(reducer, []); <span class="comment">// 使用dispatch事件</span></span><br></pre></td></tr></table></figure><h2 id="immer-实现深度克隆"><a href="#immer-实现深度克隆" class="headerlink" title="immer 实现深度克隆"></a>immer 实现深度克隆</h2><p>参考链接：<a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">immer</a></p><ul><li>安装 <code>yarn add immer</code></li><li>用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">"immer"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseState = [</span><br><span class="line">    &#123;</span><br><span class="line">        todo: <span class="string">"Learn typescript"</span>,</span><br><span class="line">        done: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        todo: <span class="string">"Try immer"</span>,</span><br><span class="line">        done: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nextState = produce(baseState, draftState =&gt; &#123;</span><br><span class="line">    draftState.push(&#123;<span class="attr">todo</span>: <span class="string">"Tweet about it"</span>&#125;)</span><br><span class="line">    draftState[<span class="number">1</span>].done = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="use-immer"><a href="#use-immer" class="headerlink" title="use-immer"></a>use-immer</h2><p>参考链接：<a href="https://github.com/immerjs/use-immer" target="_blank" rel="noopener">user-immer</a></p><ul><li>安装<code>yarn add use-immer</code></li><li>共有两个API : useImmer 、 useImmerReducer</li><li>作用：跟 immer 一样，在最后进行封装，实现深度克隆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useImmerReducer &#125; <span class="keyword">from</span> <span class="string">"use-immer"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">draft, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"reset"</span>:</span><br><span class="line">      <span class="keyword">return</span> initialState;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"increment"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> draft.count++;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"decrement"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> draft.count--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useImmerReducer(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">"reset"</span> &#125;)&#125;&gt;Reset&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: "increment" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">"decrement"</span> &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><ul><li>react 16.3之后出现的API</li><li>实现跨组件的共享数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoContext.js  定义</span></span><br><span class="line"><span class="keyword">import</span> &#123;createContext&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoContext=createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js 提供数据</span></span><br><span class="line"><span class="keyword">import</span> TodoContext <span class="keyword">from</span> <span class="string">'./TodoContext.js'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;TodoContext.Provider value=&#123;&#123;todo, dispatch&#125;&#125;&gt;</span><br><span class="line">    &lt;<span class="regexp">/TodoContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ResetButton.js 使用数据</span></span><br><span class="line"><span class="regexp">import React, &#123; useContext &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import &#123; TodoContext &#125; from './</span>TodoContext.js<span class="string">';</span></span><br><span class="line"><span class="string">export default ()=&gt;&#123;</span></span><br><span class="line"><span class="string">    const &#123; dispatch &#125;= useContext(TodoContext);</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;button OnClick=&#123;()=&gt; dispatch(&#123; type:"RESET" &#125;)&#125;&gt;reset&lt;/button&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><ul><li>是异步函数</li><li>连续执行多次相同任务的<code>setState()</code>，会被合并为一个任务，组件也只会被渲染一次</li><li>不想被合并任务，则采用 <code>setState(prevState, props)</code> 使用 prevState 来取值</li><li><code>setState(nextState, ()=&gt;{})</code> 第一个参数是想要改变的值，第二个参数是回调函数，当 state 修改完成后会执行回调函数</li></ul><h2 id="static-contextType"><a href="#static-contextType" class="headerlink" title="static contextType"></a>static contextType</h2><ul><li>要求 react 版本是16.6.0之上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoContext.js  定义</span></span><br><span class="line"><span class="keyword">import</span> &#123;createContext&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoContext=createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js 提供数据</span></span><br><span class="line"><span class="keyword">import</span> TodoContext <span class="keyword">from</span> <span class="string">'./TodoContext.js'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;TodoContext.Provider value=&#123;&#123;todo, dispatch&#125;&#125;&gt;</span><br><span class="line">    &lt;<span class="regexp">/TodoContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ResetButton.js 使用数据</span></span><br><span class="line"><span class="regexp">import React, &#123; useContext &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import &#123; TodoContext &#125; from './</span>TodoContext.js<span class="string">';</span></span><br><span class="line"><span class="string">export default class ResetButton extends React.Component&#123;</span></span><br><span class="line"><span class="string">    static contextType = TodoContext;</span></span><br><span class="line"><span class="string">    render()&#123;</span></span><br><span class="line"><span class="string">        const &#123;dispatch&#125; = this.context; // 取出 dipatch</span></span><br><span class="line"><span class="string">         return (</span></span><br><span class="line"><span class="string">            &lt;button OnClick=&#123;()=&gt; dispatch(&#123; type:"RESET" &#125;)&#125;&gt;reset&lt;/button&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-25</title>
      <link href="/2019/07/25/2019-07-25/"/>
      <url>/2019/07/25/2019-07-25/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发一个图书管理系统的用户信息页面踩坑</p></blockquote><h2 id="reducer-js中深拷贝和浅拷贝"><a href="#reducer-js中深拷贝和浅拷贝" class="headerlink" title="reducer.js中深拷贝和浅拷贝"></a>reducer.js中深拷贝和浅拷贝</h2><p><code>{...state}、 Object.assign()</code>只能复制到第三层，属于浅拷贝，如果需要多层次拷贝，最好层层展开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 踩坑！！！！！</span></span><br><span class="line"><span class="comment">// &#123;...state&#125;,Object.assign()只是浅层复制，只能复制表层，无法到达第三层</span></span><br><span class="line"><span class="comment">// 采用以下方式进行深层复制</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    data: state.data &amp;&amp; state.data.map(<span class="function">(<span class="params">el, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i === itemIndex)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; ...el, [field]: value &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; ...el &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="e-target-value的问题"><a href="#e-target-value的问题" class="headerlink" title="e.target.value的问题"></a>e.target.value的问题</h2><blockquote><p>在 <code>this.setState()</code> 中使用<code>e.target.value</code>无法获取到 <code>value</code> 值</p></blockquote><p>参考链接：<a href="https://reactjs.org/docs/events.html#event-pooling" target="_blank" rel="noopener">官方解释</a></p><p><img src="/.io//eTargetValue.jpg" alt="官方说明"></p><blockquote><p>在方法里面 用e.persist() 阻止一下就可以了</p></blockquote><p><img src="/.io//example.jpg" alt="example"></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-23</title>
      <link href="/2019/07/23/2019-07-23/"/>
      <url>/2019/07/23/2019-07-23/</url>
      
        <content type="html"><![CDATA[<p>react高级指引：无障碍、context</p><a id="more"></a><h2 id="react高级指引"><a href="#react高级指引" class="headerlink" title="react高级指引"></a>react高级指引</h2><p>参考链接:<br><a href="https://react.docschina.org/docs/context.html#legacy-api" target="_blank" rel="noopener">react官网</a></p><h3 id="无障碍"><a href="#无障碍" class="headerlink" title="无障碍"></a>无障碍</h3><ul><li><p><code>&lt;Fragment&gt;&lt;/Fragment&gt;</code>可以简写为<code>&lt;&gt;&lt;/&gt;</code>；</p></li><li><p><strong>使用程序管理焦点</strong></p></li></ul><blockquote><p>当使用 HOC 来扩展组件时，我们建议使用 React 的 forwardRef 函数来向被包裹的组件转发 ref。如果第三方的 HOC 不支持转发 ref，下面的方法仍可以作为一种备选方案。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过在子组件上设置一个特殊的 prop 来对父组件暴露 DOM refs 从而把父组件的 ref 传向子节点的 DOM 节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props);</span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ 创造一个 inputElement DOM 元素的 ref</span></span><br><span class="line"><span class="regexp">    this.inputElement = React.createRef();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 使用 `ref` 回调函数以在实例的一个变量中存储文本输入 DOM 元素</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/（比如，this.inputElement）。</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;CustomTextInput inputRef=&#123;this.inputElement&#125; /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">focus()&#123;</span><br><span class="line">    <span class="comment">// 使用原始的 DOM API 显式地聚焦在 text input 上</span></span><br><span class="line">    <span class="comment">// 注意：我们通过访问 “current” 来获得 DOM 节点</span></span><br><span class="line">    <span class="comment">// 现在你就可以在需要时设置焦点了</span></span><br><span class="line">    <span class="keyword">this</span>.inputElement.current.focus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/davidtheclark/react-aria-modal" target="_blank" rel="noopener">react-aria-modal</a> 提供了一个很好的焦点管理的例子。 这是一个少有的完全无障碍的模态窗口的例子。它不仅仅把初始焦点设置在了取消按钮上（防止键盘用户意外激活成功操作）和把键盘焦点固定在了窗口之内， 关闭窗口时它也会把键盘焦点重置到打开窗口的那一个元素上。</p></blockquote><ul><li>鼠标和指针时间<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlurExample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">isOpen</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.timeOutId = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.onClickHandler = <span class="keyword">this</span>.onClickHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onBlurHandler = <span class="keyword">this</span>.onBlurHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onFocusHandler = <span class="keyword">this</span>.onFocusHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClickHandler() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">currentState</span> =&gt;</span> (&#123;</span><br><span class="line">      isOpen: !currentState.isOpen</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们在下一个时间点使用 setTimeout 关闭弹窗。</span></span><br><span class="line">  <span class="comment">// 这是必要的，因为失去焦点事件会在新的焦点事件前被触发，</span></span><br><span class="line">  <span class="comment">// 我们需要通过这个步骤确认这个元素的一个子节点</span></span><br><span class="line">  <span class="comment">// 是否得到了焦点。</span></span><br><span class="line">  onBlurHandler() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timeOutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        isOpen: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果一个子节点获得了焦点，不要关闭弹窗。</span></span><br><span class="line">  onFocusHandler() &#123;</span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.timeOutId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// React 通过把失去焦点和获得焦点事件传输给父节点</span></span><br><span class="line">    <span class="comment">// 来帮助我们。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onBlur=&#123;<span class="keyword">this</span>.onBlurHandler&#125;</span><br><span class="line">           onFocus=&#123;<span class="keyword">this</span>.onFocusHandler&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onClickHandler&#125;</span><br><span class="line">                aria-haspopup=<span class="string">"true"</span></span><br><span class="line">                aria-expanded=&#123;<span class="keyword">this</span>.state.isOpen&#125;&gt;</span><br><span class="line">          Select an option</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.isOpen &amp;&amp; (</span></span><br><span class="line"><span class="regexp">          &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Option 1&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;Option <span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Option 3&lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p><strong>作用</strong>：Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-22</title>
      <link href="/2019/07/22/2019-07-22/"/>
      <url>/2019/07/22/2019-07-22/</url>
      
        <content type="html"><![CDATA[<p>生命周期、组件传值、引入Antd</p><a id="more"></a><p>参考链接：<br><a href="https://blog.csdn.net/weixin_36985768/article/details/89854641" target="_blank" rel="noopener">React.js基础精讲03</a><br><a href="https://www.reactjscn.com/" target="_blank" rel="noopener">react官网</a><br><a href="https://ant.design/index-cn" target="_blank" rel="noopener">Antd官网</a></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p> <strong>1. 初始化<code>Initialization</code></strong>：<br>初始化数据props and state。</p><p><strong>2. 挂载组件<code>Mounting</code></strong>：<br><code>componentWillMount()</code>在组件即将被挂载到页面的时刻，自动执行，只会在第一次挂载执行；<code>render()</code>执行组件挂载到页面；<code>componentDidMount()</code>在组件被挂在到页面之后，自动执行，只会在第一次挂载执行。</p><p><strong>3. 组件更新<code>Updation</code></strong>：<br>props发生变化：<br><code>componentWillReceiveProps()</code>当一个组件从父组件接受参数props，只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被自动执行（换句话说，如果这个组件第一次存在于父组件中，不会被执行，如果这个组件之前已经存在于父组件中，才会执行）；之后内容跟states的一样。<br>states发生变化：<br><code>shouldComponentUpdate()</code>组件被渲染一次之后，需要进行更新之前，会被自动执行，必须返回一个Boolean值（返回true，组件需要被更新；返回false，组件不需要被更新，不会执行后续周期函数）；<br><code>componentWillUpdate()</code>在组件被更新之前，会被自动执行，但是它在shouldComponent() 之后被执行，如果shouldComponent() 返回true才被执行，如果返回false，则不会被执行；render()重新进行页面更新；<br><code>componentDidUpdate()</code>组件更新完成之后，它会被执行。</p><ol start="4"><li>卸载组件Unmounting：<br><code>componentWillUnmount()</code>当这个组件即将被从页面中剔除的时候，自动执行。</li></ol><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><ul><li><strong>父组件向子组件传值</strong>：父组件通过属性xxx进行传值，子组件通过{this.props.xxx}进行接收</li><li><strong>子组件向父组件传值</strong>：即调用父组件传递过来的方法。<br>1）由于删除Item主要是修改state的值来完成，因此需要子组件调用父组件的handleItemDelete()方法并传递index参数，进行删除item，那么采用的方法是，通过属性传值的方法向子组件传递父组件的handleItemDelete()方法和index参数，使子组件能调用父组件的方法。<br>2）向子组件传递父组件的方法时，要注意修改方法的this指向，使其指向父组件。</li></ul><h3 id="引入Antd"><a href="#引入Antd" class="headerlink" title="引入Antd"></a>引入Antd</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Input,InputNumber, Select, DatePicker&#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"antd/dist/antd.css"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-20</title>
      <link href="/2019/07/20/2019-07-20/"/>
      <url>/2019/07/20/2019-07-20/</url>
      
        <content type="html"><![CDATA[<p><strong>react + webpack 配置</strong>：提高搜索模块速度、编译css scss sass less文件、编译图片、编译字体、清除旧文件、html自动引入css js、抽离 css 文件、并发执行编译、设置source map 定位错误、配置热更新 局部更新、开启本地服务、代码分割、清除无用CSS样式、PWA配置、webpack 哈希值<br><strong>less 和 sass 的区别</strong><br><strong>进程和线程</strong></p><a id="more"></a><p><strong>参考链接：</strong><br><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a><br><a href="https://juejin.im/post/5cfe4b13f265da1bb13f26a8" target="_blank" rel="noopener">webpack4 的30个步骤打造优化到极致的 react 开发环境，如约而至</a></p><hr><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><ul><li><p>安装 create-react-app</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure></li><li><p>创建react项目, 三种方式</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"></span><br><span class="line">npm init react-app my-app</span><br><span class="line"></span><br><span class="line">yarn create react-app my-app</span><br></pre></td></tr></table></figure><ul><li><p>安装包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yarn add webpack --dev  // 不用安装webpack因为react-script已经封装了webpack</span></span><br><span class="line"><span class="comment">// yarn add webpack-cli --dev</span></span><br><span class="line"><span class="comment">// npm install --save-dev @babel/core @babel/cli @babel/preset-env browserify  // es6编译成es5</span></span><br><span class="line"><span class="comment">// npm install --save @babel/polyfill </span></span><br><span class="line">yarn add eslint -g   <span class="comment">// eslint 语法检查工具</span></span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">// 或者</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure></li><li><p>启动项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br><span class="line">// 或者</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure></li><li><p>编译项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">// 或者</span><br><span class="line">yarn build</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li><p><code>npm start</code> 启动项目</p></li><li><p><code>npm test</code> 测试项目</p></li><li><p><code>npm run build</code> 生成静态文件</p></li><li><p><code>npm run eject</code> 解锁react的配置文件</p></li></ul><p><strong>解锁失败</strong>：git的原因<br><strong>解决方案</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line">git commit -m <span class="string">"init"</span></span><br><span class="line"><span class="comment">//第三步</span></span><br><span class="line">npm run eject</span><br></pre></td></tr></table></figure><hr><h2 id="react-webpack-配置"><a href="#react-webpack-配置" class="headerlink" title="react + webpack 配置"></a>react + webpack 配置</h2><h3 id="提高搜索模块速度"><a href="#提高搜索模块速度" class="headerlink" title="提高搜索模块速度"></a>提高搜索模块速度</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">//指定extension之后可以不用在require或是import的时候加文件扩展名,会依次尝试添加扩展名进行匹配</span></span><br><span class="line">    extensions: [<span class="string">"*"</span>,<span class="string">".js"</span>, <span class="string">".jsx"</span>], <span class="comment">// extension 不能包含空字符</span></span><br><span class="line">    <span class="comment">// 配置别名可以加快webpack查找模块的速度</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        <span class="string">"@"</span>: path.resolve(__dirname, <span class="string">"../src"</span>),</span><br><span class="line">        <span class="comment">// pages: path.resolve(__dirname, "../src/pages"),</span></span><br><span class="line">        <span class="comment">// router: path.resolve(__dirname, "../src/router")</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="编译css-scss-sass-less文件"><a href="#编译css-scss-sass-less文件" class="headerlink" title="编译css scss sass less文件"></a>编译css scss sass less文件</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        MiniCssExtractPlugin.loader,  <span class="comment">// 编译css文件后单独抽离，不会编译进js文件</span></span><br><span class="line">        <span class="string">"css-loader"</span>, <span class="comment">// 编译css</span></span><br><span class="line">        <span class="string">"postcss-loader"</span>, <span class="comment">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class="line">        <span class="string">"sass-loader"</span> <span class="comment">// 编译scss</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="编译图片"><a href="#编译图片" class="headerlink" title="编译图片"></a>编译图片</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg|ico)/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            outputPath: <span class="string">"images/"</span>, <span class="comment">// 图片输出的路径</span></span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>file-loader 和 url-loader 区别</strong> : </p><ul><li>url-loader 可以将图片转为 base64 字符串，能更快的加载图片，一旦图片过大，<br>就需要使用 file-loader 的加载本地图片，故 url-loader 可以设置图片超过多少字节时，使用 file-loader 加载图片。</li><li>url-loader 依赖 file-loader</li><li>当使用 url-loader 加载图片，图片大小小于上限值，则将图片转 base64 字符串；否则使用 file-loader 加载图片，都是为了提高浏览器加载图片速度。</li><li>使用 url-loader 加载图片比 file-loader 更优秀</li></ul><h3 id="编译字体"><a href="#编译字体" class="headerlink" title="编译字体"></a>编译字体</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,  <span class="comment">// 编译字体</span></span><br><span class="line">    use: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                name: <span class="string">'[name]-[hash:5].min.[ext]'</span>,</span><br><span class="line">                limit: <span class="number">5000</span>, <span class="comment">// fonts file size &lt;= 5KB, use 'base64'; else, output svg file</span></span><br><span class="line">                publicPath: <span class="string">'fonts/'</span>,</span><br><span class="line">                outputPath: <span class="string">'fonts/'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除旧文件"><a href="#清除旧文件" class="headerlink" title="清除旧文件"></a>清除旧文件</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">    <span class="comment">//每次打包时清除 dist 目录下旧版本文件</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="html自动引入css-js"><a href="#html自动引入css-js" class="headerlink" title="html自动引入css js"></a>html自动引入css js</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="comment">// 将js css 文件自动引入html</span></span><br><span class="line">    filename: <span class="string">"index.html"</span>, <span class="comment">// 最终创建的文件名</span></span><br><span class="line">    template: path.resolve(__dirname,<span class="string">'..'</span>,<span class="string">'public/index.html'</span>) , <span class="comment">// 指定模板路径</span></span><br><span class="line">    minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 去除空白</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="抽离-css-文件"><a href="#抽离-css-文件" class="headerlink" title="抽离 css 文件"></a>抽离 css 文件</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css单独提取</span></span><br><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"[name].[hash].css"</span>,  <span class="comment">// 设置文件名</span></span><br><span class="line">    chunkFilename: <span class="string">"[id].[hash].css"</span> <span class="comment">// 设置 chunk 文件名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="并发执行编译"><a href="#并发执行编译" class="headerlink" title="并发执行编译"></a>并发执行编译</h3><p>配置在公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// yarn add babel-loader @babel/core @babel/preset-env --dev</span></span><br><span class="line">        <span class="comment">// @babel/core-babel核心模块    @babel/preset-env-编译ES6等   @babel/preset-react-转换JSX</span></span><br><span class="line">        <span class="comment">// @babel/plugin-transform-runtime: 避免 polyfill 污染全局变量，减小打包体积</span></span><br><span class="line">        <span class="comment">// @babel/polyfill: ES6 内置方法和函数转化垫片，比如Map，Set，Promise等新的全局对象</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">"happypack/loader?id=happyBabel"</span> <span class="comment">// 一个loader对应一个id</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">    <span class="comment">// 因为node之上的webpack是单线程模型</span></span><br><span class="line">    <span class="comment">// Happy Pack 就能让Webpack做到这一点，它将任务分解给多个子进程去并发执行，子进程处理完后再将结果发送给主进程</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        <span class="comment">//用id来标识 happypack处理那里类文件</span></span><br><span class="line">        id: <span class="string">'happyBabel'</span>,</span><br><span class="line">        <span class="comment">//如何处理  用法和loader 的配置一样</span></span><br><span class="line">        loaders: [<span class="string">'babel-loader'</span>],</span><br><span class="line">        <span class="comment">//共享进程池threadPool: HappyThreadPool 代表共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程去处理任务，以防止资源占用过多。</span></span><br><span class="line">        threadPool: happyThreadPool,</span><br><span class="line">        <span class="comment">//允许 HappyPack 输出日志</span></span><br><span class="line">        verbose: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="设置source-map-定位错误"><a href="#设置source-map-定位错误" class="headerlink" title="设置source map 定位错误"></a>设置source map 定位错误</h3><p>配置在开发环境 development</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发环境</span></span><br><span class="line"><span class="comment">// 正确的配置source map，能够提高开发效率，更快的定位到错误位置。</span></span><br><span class="line">devtool: <span class="string">'cheap-module-eval-soure-map'</span>, <span class="comment">//开发环境配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产环境</span></span><br><span class="line"><span class="comment">// source map就是帮助我们定位到错误信息位置的文件</span></span><br><span class="line">devtool: <span class="string">'cheap-module-source-map'</span>, <span class="comment">//线上环境配置</span></span><br></pre></td></tr></table></figure><h3 id="配置热更新-局部更新"><a href="#配置热更新-局部更新" class="headerlink" title="配置热更新 局部更新"></a>配置热更新 局部更新</h3><p>配置在开发环境 development</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="comment">//开启HMR(热替换功能,替换更新部分,不重载页面！) 相当于在命令行加 --hot</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// 指定环境,定义环境变量</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">        <span class="string">'process.env'</span>: &#123;</span><br><span class="line">            VUEP_BASE_URL: <span class="string">'/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="开启本地服务"><a href="#开启本地服务" class="headerlink" title="开启本地服务"></a>开启本地服务</h3><p>配置在开发环境 development</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"set NODE_ENV=development &amp;&amp; webpack-dev-server --open --config ./my-config/webpack.dev.config.js"</span>, <span class="comment">//package.json 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在本地为搭建了一个小型的静态文件服务器，有实时重加载的功能，为将打包生成的资源提供了web服务</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 实现局部更改，而不会影响其他部分的状态，eg. 更改按钮文字，不会影响到经过点击添加到 6 的模块，使其初始化为 0</span></span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    host: <span class="string">"localhost"</span>, <span class="comment">// 可以使用手机访问</span></span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//  该选项的作用所有的404都连接到index.html</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="comment">// 代理到后端的服务地址</span></span><br><span class="line">        <span class="string">"/api"</span>: <span class="string">"http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><p>配置在生产环境 production</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码分割按需加载、提取公共代码</span></span><br><span class="line">optimization: &#123; </span><br><span class="line">    <span class="comment">// 清除到代码中无用的js代码，只支持import方式引入，不支持commonjs的方式引入</span></span><br><span class="line">    <span class="comment">// 只要mode是production就会生效，develpoment的tree shaking是不生效的，因为webpack为了方便你的调试</span></span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">"all"</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            <span class="comment">// 公共代码打包分组配置</span></span><br><span class="line">            vendors: &#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                name: <span class="string">'vendors'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// styles: &#123; // 将css文件分割到单独的css chunk中</span></span><br><span class="line">            <span class="comment">//     name: 'styles',</span></span><br><span class="line">            <span class="comment">//     test: /\.css$/,</span></span><br><span class="line">            <span class="comment">//     chunks: 'all',</span></span><br><span class="line">            <span class="comment">//     enforce: true</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="清除无用CSS样式"><a href="#清除无用CSS样式" class="headerlink" title="清除无用CSS样式"></a>清除无用CSS样式</h3><ul><li>配置在生产环境 production</li><li>慎用，因为会清除掉一些样式，导致样式页面无法样式正常加载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除无用 css---生产环境---css-tree-shaking</span></span><br><span class="line"><span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">    paths: glob.sync([</span><br><span class="line">        <span class="comment">// 要做 CSS Tree Shaking 的路径文件</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'src/*.html'</span>), <span class="comment">// 需要对 html 文件进行 tree shaking</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'src/*.js'</span>),</span><br><span class="line">        <span class="comment">// path.resolve(__dirname, '..', 'src/**/*.jsx'),</span></span><br><span class="line">    ])</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="PWA配置"><a href="#PWA配置" class="headerlink" title="PWA配置"></a>PWA配置</h3><ul><li><p>配置在生产环境 production</p></li><li><p><a href="https://blog.csdn.net/mjzhang1993/article/details/79584854" target="_blank" rel="noopener">使用 workbox 实现 PWA</a></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// PWA配置，生产环境才需要，解决此情况：当第一次访问成功后，进行缓存，突然服务器挂了，仍然能够访问，起到预防</span></span><br><span class="line"><span class="keyword">new</span> WorkboxPlugin.GenerateSW(&#123;</span><br><span class="line">    clientsClaim: <span class="literal">true</span>, <span class="comment">// Service Worker 被激活后使其立即获得页面控制权</span></span><br><span class="line">    skipWaiting: <span class="literal">true</span>  <span class="comment">// 强制等待中的 Service Worker 被激活</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><hr><h2 id="webpack-哈希值"><a href="#webpack-哈希值" class="headerlink" title="webpack 哈希值"></a>webpack 哈希值</h2><p> 为什么设置哈希值？怎么设置的？<code>hash &amp; chunkhash &amp; contenthash</code>区别</p><blockquote><p>参考链接： <a href="https://www.jianshu.com/p/e609e7b55aa7" target="_blank" rel="noopener">https://www.jianshu.com/p/e609e7b55aa7</a></p></blockquote><p>浏览器为了优化体验，会有缓存机制。如果浏览器判断当前资源没有更新，就不会去服务端下载，而是直接使用本地资源。在webpack的构建中，我们通常使用给文件添加后缀值来改名以及提取公共代码到不会改变的lib包中来解决新资源缓存问题。</p><blockquote><p><strong>hash</strong> : 标识的就是这个打包的过程。也就是说同一过程产出的产物的hash值都是一样的，也就解释了上面的过程。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>, <span class="comment">// 设置哈希值，打包出来的 hash 字符串长度为8</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hash 存在问题</strong>：改变 js 的内容，打包后，css 的名称也会发生改变</p><blockquote><p><strong>chunkhash</strong> 就是模块的hash，也就是根据模块内容计算的hash值。</p></blockquote><p>改变 js 的内容，打包后，css 的名称不会发生改变</p><p><strong>chunkhash 存在问题</strong>：改变 js 的内容后，其哈希值可能和某个 CSS 的文件哈希值相同</p><blockquote><p><strong>contenthash</strong> 根据文件内容来定义hash值 (推荐！！)</p></blockquote><hr><h2 id="less-和-sass-的区别"><a href="#less-和-sass-的区别" class="headerlink" title="less 和 sass 的区别"></a>less 和 sass 的区别</h2><p>参考链接：<a href="https://www.cnblogs.com/ToBeBest/p/8418994.html" target="_blank" rel="noopener">https://www.cnblogs.com/ToBeBest/p/8418994.html</a></p><p><strong>1. 区别</strong></p><p>Less是基于JavaScript，是在客户端处理的。</p><p>Sass是基于Ruby的，是在服务器端处理的。</p><p>关于变量在Less和Sass中的唯一区别就是Less用@，Sass用$。</p><p><strong>2. 相同</strong></p><ul><li><p>混入(Mixins)——class中的class；</p></li><li><p>参数混入——可以传递参数的class，就像函数一样；</p></li><li><p>嵌套规则——Class中嵌套class，从而减少重复的代码；</p></li><li><p>运算——CSS中用上数学；</p></li><li><p>颜色功能——可以编辑颜色；</p></li><li><p>名字空间(namespace)——分组样式，从而可以被调用；</p></li><li><p>作用域——局部修改样式；</p></li><li><p>JavaScript 赋值——在CSS中使用JavaScript表达式赋值。</p></li></ul><p><strong>3. Sass与Scss是什么关系?</strong></p><p>Sass的缩排语法，对于写惯css前端的web开发者来说很不直观，也不能将css代码加入到Sass里面，因此sass语法进行了改良，Sass 3就变成了Scss(sassy css)。与原来的语法兼容，只是用{}取代了原来的缩进。</p><hr><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li><p>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</p></li><li><p>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</p></li><li><p>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；</p></li><li><p>调度和切换：线程上下文切换比进程上下文切换要快得多。</p></li></ul><hr><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><blockquote><ol><li><code>Error: Cannot find module &#39;webpack-cli/bin/config-yargs&#39;</code></li></ol></blockquote><p><strong>原因</strong>：没有安装 webpack-cli</p><blockquote><ol start="2"><li>requires that you specify <code>NODE_ENV</code> or <code>BABEL_ENV</code> environment variables. Valid values are “development”, “test”, and “production”. Instead, received: undefined. </li></ol></blockquote><p>因为需要设置node变量，在 package.json 文件中，设置<code>dev</code>和<code>build</code>命令添加<code>set NODE_ENV=development &amp;&amp;</code></p><blockquote><ol start="3"><li><code>react Error: Multiple configuration files found. Please remove one:  - package.json#babel  - .babelrc</code></li></ol></blockquote><p> 因为设置了<code>.babelrc</code>文件来对 <code>es6</code>语法做预处理，同时还在<code>package.json</code>设置了<code>babel</code>，因此删掉package.json中的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>明明开发环境显示的好好地样式，在生产环境就不生效了</li></ol></blockquote><p><a href="https://blog.csdn.net/qq_37800886/article/details/87856352" target="_blank" rel="noopener">https://blog.csdn.net/qq_37800886/article/details/87856352</a><br>因为设置了 <code>PurifyCSS</code> 插件，使得 css 样式表中的部分样式无法加载。</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-19</title>
      <link href="/2019/07/19/2019-07-19/"/>
      <url>/2019/07/19/2019-07-19/</url>
      
        <content type="html"><![CDATA[<p><strong>webpack配置</strong>：编译css 、scss、less、图片、抽离css样式、代码分割抽取重复代码、<br><strong>踩坑</strong>：clean-webpack-plugin插件、html-webpack-plugin插件  </p><a id="more"></a><h2 id="webpack-环境搭建"><a href="#webpack-环境搭建" class="headerlink" title="webpack 环境搭建"></a>webpack 环境搭建</h2><p>参考 <code>7-18.md</code> 的</p><hr><h2 id="将-css-编译进-js"><a href="#将-css-编译进-js" class="headerlink" title="将 css 编译进 js"></a>将 css 编译进 js</h2><ol><li>在 js 文件中加入需要引入的 css 文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> index_css <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>webpack.config.js</code>文件的<code>module.rules</code>下增加代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>], <span class="comment">// 将css样式进行编译</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>安装引入的两个插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader --dev</span><br><span class="line">yarn add css-loader --dev</span><br></pre></td></tr></table></figure><hr><h2 id="less-文件打包分离"><a href="#less-文件打包分离" class="headerlink" title="less 文件打包分离"></a>less 文件打包分离</h2><p><strong>参考链接：</strong><br><a href="http://lesscss.cn/functions/" target="_blank" rel="noopener"> less 官网</a><br><a href="https://www.jianshu.com/p/9f64b62e8e65" target="_blank" rel="noopener"> less 语法总结</a><br><a href="https://www.cnblogs.com/goloving/p/8654176.html" target="_blank" rel="noopener"> webpack 配置 less/scss 文件打包</a><br><a href="https://webpack.js.org/migrate/3/#extracttextpluginextract" target="_blank" rel="noopener"> extractTextPlugin.extract 分离样式插件</a></p><ol><li>安装插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yarn add less --dev</span><br><span class="line">yarn add less-loader --dev</span><br><span class="line">yarn add sass-loader --dev</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2. 在`webpack.config.js`文件的`module.rules`下增加代码</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">test</span>:/\.less$/,</span><br><span class="line">    use:[&#123;</span><br><span class="line">        loader: <span class="string">"style-loader"</span> , </span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        loader: <span class="string">"css-loader"</span>, // 对 css 进行编译</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        loader: <span class="string">"less-loader"</span>, // 对 less 编译成css</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>新建<code>index.less</code></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@second-color:</span>blue;</span><br><span class="line"><span class="variable">@padding-space:</span><span class="number">10px</span> <span class="number">0</span>;  <span class="comment">// 定义样式变量</span></span><br><span class="line"><span class="variable">@normal-size:</span><span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hwk-2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@second-color</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@padding-space</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@normal-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 js 文件中加入需要引入的 less 文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> index_less <span class="keyword">from</span> <span class="string">'./index.less'</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>调用<code>npx webpack</code>进行打包，查看打包后的文件可以发现，css 样式被嵌入 html 中，成为内联样式</p></li><li><p>进行 less 分离<br>使用<code>extract-text-webpack-plugin</code>插件进行抽离，报错莫名其妙，发现好像已经废弃了，在 webpack4 中，改用 <code>mini-css-extract-plugin</code> 插件。</p></li></ol><ul><li><p>安装：<code>yarn run mini-css-extract-plugin --dev</code></p></li><li><p>配置代码：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin=<span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">//module.rules中，替换掉 style-loader</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">    use:[&#123;</span><br><span class="line">        loader: MiniCssExtractPlugin.loader , <span class="comment">// 进行css样式文件抽离</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        loader: <span class="string">"less-loader"</span>,</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">//plugins中</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename:<span class="string">'[name]_[contenthash:8].css'</span></span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><hr><h2 id="图片进行打包"><a href="#图片进行打包" class="headerlink" title="图片进行打包"></a>图片进行打包</h2><blockquote><p><strong>踩坑</strong>: 不要直接在 html 中引入图片, 最好的方式是在 css 中引入, 否则编译后打开 html 会报错<code>net::ERR_FILE_NOT_FOUND</code></p></blockquote><ol><li>安装 url-loader<br>url-loader 封装了 file-loader，用来加载静态资源文件, 同时实现了 file-loader 里没有的功能。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add url-loader</span><br></pre></td></tr></table></figure><ol start="2"><li>添加配置</li></ol><p><strong>两种方法:</strong></p><ul><li><strong>采用base64编码</strong>: 在处理图片和进行 base64 编码的时候，需要使用url-loader。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>, <span class="comment">// 对图片进行加载编译</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>采用压缩图片</strong>: 在压缩图片的时候，要使用 img-loader 插件，并且针对不同的图片类型启用不同的子插件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                name: <span class="string">"[name]-[hash:5].min.[ext]"</span>, <span class="comment">// 定义压缩后的图片名称</span></span><br><span class="line">                limit: <span class="number">20000</span>, <span class="comment">// size &lt;= 20KB</span></span><br><span class="line">                publicPath: <span class="string">"images/"</span>,</span><br><span class="line">                outputPath: <span class="string">"images/"</span>  <span class="comment">// 在dist/images 文件夹下会生成图片 [name].min.js</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>具体压缩图片设置, 采用 img-loader , 待深入了解 ~ ~ ~</p><hr><h2 id="SCSS-文件打包分离"><a href="#SCSS-文件打包分离" class="headerlink" title="SCSS 文件打包分离"></a>SCSS 文件打包分离</h2><p>处理 SCSS 文件方式, 跟处理 less 方式差不多</p><ul><li>安装<code>sass   sass-loader   node-sass</code>, 踩坑, 是 <code>sass</code> 不是 <code>scss</code> , 还有记得安装第三个包</li><li>添加配置</li><li>在js文件中引入</li></ul><p><strong>参考链接:</strong><br><a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="noopener">sass语法官网</a><br><a href="https://blog.csdn.net/weixin_43586120/article/details/89452625" target="_blank" rel="noopener">sass语法汇总</a></p><hr><h2 id="webpack-优化"><a href="#webpack-优化" class="headerlink" title="webpack 优化"></a>webpack 优化</h2><p><strong>参考链接</strong>:<br><a href="https://juejin.im/post/5af1677c6fb9a07ab508dabb" target="_blank" rel="noopener">一步一步的了解webpack4的splitChunk插件</a></p><ul><li><p>CommonsChunkPlugin 在 webpack4 好像被废弃了</p></li><li><p>配置代码如下:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例配置</span></span><br><span class="line">optimization: &#123;</span><br><span class="line">    mergeDuplicateChunks: <span class="literal">true</span>,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"manifest"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">"async"</span>, <span class="comment">// 必须三选一： "initial" | "all"(推荐) | "async" (默认就是async)</span></span><br><span class="line">        minSize: <span class="number">30000</span>, <span class="comment">// 最小尺寸，30000</span></span><br><span class="line">        minChunks: <span class="number">1</span>, <span class="comment">// 最小 chunk ，默认1</span></span><br><span class="line">        maxAsyncRequests: <span class="number">5</span>, <span class="comment">// 最大异步请求数， 默认5</span></span><br><span class="line">        maxInitialRequests : <span class="number">3</span>, <span class="comment">// 最大初始化请求书，默认3</span></span><br><span class="line">        automaticNameDelimiter: <span class="string">'~'</span>,<span class="comment">// 打包分隔符</span></span><br><span class="line">        name: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="comment">// 打包后的名称，此选项可接收 function</span></span><br><span class="line">        cacheGroups:&#123; <span class="comment">// 这里开始设置缓存的 chunks</span></span><br><span class="line">            priority: <span class="number">0</span>, <span class="comment">// 缓存组优先级</span></span><br><span class="line">            vendor: &#123; <span class="comment">// key 为entry中定义的 入口名称</span></span><br><span class="line">                chunks: <span class="string">"initial"</span>, <span class="comment">// 必须三选一： "initial" | "all" | "async"(默认就是async) </span></span><br><span class="line">                test: <span class="regexp">/react|lodash/</span>, <span class="comment">// 正则规则验证，如果符合就提取 chunk</span></span><br><span class="line">                name: <span class="string">"vendor"</span>, <span class="comment">// 要缓存的 分隔出来的 chunk 名称 </span></span><br><span class="line">                minSize: <span class="number">30000</span>,</span><br><span class="line">                minChunks: <span class="number">1</span>,</span><br><span class="line">                enforce: <span class="literal">true</span>,</span><br><span class="line">                maxAsyncRequests: <span class="number">5</span>, <span class="comment">// 最大异步请求数， 默认1</span></span><br><span class="line">                maxInitialRequests : <span class="number">3</span>, <span class="comment">// 最大初始化请求书，默认1</span></span><br><span class="line">                reuseExistingChunk: <span class="literal">true</span> <span class="comment">// 可设置是否重用该chunk</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="插件踩坑"><a href="#插件踩坑" class="headerlink" title="插件踩坑"></a>插件踩坑</h2><h3 id="clean-webpack-plugin插件"><a href="#clean-webpack-plugin插件" class="headerlink" title="clean-webpack-plugin插件"></a>clean-webpack-plugin插件</h3><p>清除生成的bundle文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要加大括号，否则会报错 CleanWebpackPlugin is not a constructor，原来写法改了</span></span><br><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>); <span class="comment">//清除生成的bundle文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在pulgins</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="html-webpack-plugin插件"><a href="#html-webpack-plugin插件" class="headerlink" title="html-webpack-plugin插件"></a>html-webpack-plugin插件</h3><p>html 自动引入生成的 js css 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);  <span class="comment">//实现自动将生成的bundle文件引入html</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 在pulgins</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; </span><br><span class="line">        title: <span class="string">'webpack4 extract css methord of new'</span>,</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        filename: <span class="string">'index.html'</span>,  <span class="comment">// 定义打包后的html文件名</span></span><br><span class="line">        minify: &#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span> <span class="comment">// 去掉空格</span></span><br><span class="line">        &#125;,</span><br><span class="line">        hash: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>踩坑</strong>: 引入html-webpack-plugin插件后，报错<code>&quot; Uncaught SyntaxError: Unexpected token &lt; &quot;</code></p></blockquote><p>看了以下 html 中的 css js 路径，没问题呀！！！那为啥还没办法引入呢？</p><ul><li>step 1 : 网上说在打包上传的时候不会编译es6，需要安装babel来将es6转成es5  </li></ul><p><strong>=&gt;&gt;</strong> 我已经编译过，还是bug</p><ul><li>step 2 : 在经过build/webpack.prod.conf.js打包后的JS文件hash值会有变更,因为每次更新代码到线上都会删除旧的dist目录,将最新的dist目录copy上传提供后台更新. 在更新代码的这个过程用户停留在页面上,当用户在更新完后重新操作就会导致报错，<a href="https://segmentfault.com/a/1190000016919340" target="_blank" rel="noopener">具体链接</a>  </li></ul><p><strong>=&gt;&gt;</strong> 留着以后用，还是bug</p><ul><li>step 3 :  刷新打开的 index.html 页面，修改配置<code>publicPath: &#39;/build/&#39;</code>改为<code>publicPath: path.join(__dirname, &#39;./bulid&#39;),</code>  </li></ul><p><strong>=&gt;&gt;</strong> 误打误撞，可能没办法定位到具体地址？？</p><hr><h2 id="今天做了什么？"><a href="#今天做了什么？" class="headerlink" title="今天做了什么？"></a>今天做了什么？</h2><ol><li>学习 webpack 的编译 css less sass 的编译并从 js 抽离的配置</li><li>学习 webpack 的代码拆分并自动引入 js css 进 html 的配置</li><li>整理今天学习笔记</li><li>搭建 webpack 考核作业框架</li></ol><hr><h2 id="明天要做什么？"><a href="#明天要做什么？" class="headerlink" title="明天要做什么？"></a>明天要做什么？</h2><ul><li>整理完成 webpack 考核作业</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-18</title>
      <link href="/2019/07/18/2019-07-18/"/>
      <url>/2019/07/18/2019-07-18/</url>
      
        <content type="html"><![CDATA[<p><strong>node.js简介</strong><br><strong>fs文件操作API</strong><br><strong>webpack模块</strong>：简介、安装、配置babel<br><strong>使用webpack打包文件</strong><br><strong>HTTP、TCP、Socket、TSL、HTTPS、CA证书关系</strong></p><a id="more"></a><h2 id="node-js简介"><a href="#node-js简介" class="headerlink" title="node.js简介"></a>node.js简介</h2><p><strong>参考链接</strong>：<a href="https://blog.csdn.net/weixin_40970987/article/details/82588319" target="_blank" rel="noopener">Node.js介绍-CSDN</a></p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Node.js基于Google的V8引擎，得以让JavaScript运行在服务器端，快速构建可扩展的网络应用程序的平台。<br>Node.js使用事件驱动，非阻塞I/O模型，轻量、高效，可以完美地处理时时数据，运行在不同的设备上。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>它是一个JavaScript运行环境 (Nodejs采用C++语言编写而成）；</li><li>依赖于浏览器V8引擎进行代码解释，实现高性能服务器；</li><li>事件驱动，没有复杂的面向对象框架，只需要关注事件；</li><li>非阻塞，节省资源；</li><li>异步I/O，当进行I/O操作时，先进行执行其他语句，等到I/O操作完成后，以事件形式通知线程，让线程特定时间来执行此事件，因此有了事件循环，不断检查未处理的事件。</li><li>超强的高并发能力 </li><li>社区活跃发展速度快</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不适合CPU计算密集型应用 </li><li>只支持单核CPU，不能充分利用CPU </li><li>内存控制不足且容量有限制 </li><li>不适合无异步的应用 </li><li>可靠性低<br>原因：单进程，一旦代码某个环节崩溃，整个系统都崩溃<br>解决方案：<br>（1）Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；<br>（2）开多个进程监听同一个端口，使用cluster模块；</li><li>开源组件库质量参差不齐，更新快，向下不兼容 </li><li>Debug不方便，错误没有stack trace</li></ul><h3 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li>RESTful API </li><li>统一Web应用的UI层</li><li>大量Ajax请求的应用 </li></ul><h3 id="fs文件操作API"><a href="#fs文件操作API" class="headerlink" title="fs文件操作API"></a>fs文件操作API</h3><p>参考链接：<br><a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener">fs模块文档</a><br><a href="https://blog.csdn.net/houyanhua1/article/details/79443987" target="_blank" rel="noopener">fs常用操作</a></p><h2 id="webpack模块"><a href="#webpack模块" class="headerlink" title="webpack模块"></a>webpack模块</h2><p><strong>参考链接</strong>：<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack文档</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>webpack 是一个现代 JavaScript 应用程序的<code>静态模块打包器(module bundler)</code>。当 webpack 处理应用程序时，它会递归地构建一个<code>依赖关系图(dependency graph)</code>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <code>bundle</code>。</p><p><strong>入口(entry)</strong>：构建其内部依赖图的开始。<br><strong>输出(output)</strong>： 在哪里输出它所创建的 bundles，以及如何命名这些文件。<br><strong>loader</strong>：处理那些非 JavaScript 文件，能将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。<br><strong>插件(plugins)</strong>：从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。<br><strong>模式（mode)</strong>：选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install --global webpack</span><br><span class="line">npm install --global webpack-cli // webpack <span class="number">4</span>+ 版本，你还需要安装 cli</span><br><span class="line">//本地安装</span><br><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure><h2 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h2><p><strong>1. 安装插件</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env browserify</span><br><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><p><strong>2. 配置</strong></p><p>创建babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presets = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"@babel/env"</span>,<span class="comment">//使用env插件包。</span></span><br><span class="line">        &#123;</span><br><span class="line">            targets: &#123;<span class="comment">//浏览器版本号设置(不写的话默认最低版本)</span></span><br><span class="line">                ie:<span class="string">"11"</span>,</span><br><span class="line">                edge: <span class="string">"17"</span>,</span><br><span class="line">                firefox: <span class="string">"60"</span>,</span><br><span class="line">                chrome: <span class="string">"67"</span>,</span><br><span class="line">                safari: <span class="string">"11.1"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            useBuiltIns: <span class="string">"usage"</span>,<span class="comment">//自动识别版本，选择对应的polyfill</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; presets &#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 运行</strong></p><p>1）打包es6文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/babel src --out-dir lib</span><br></pre></td></tr></table></figure><blockquote><p>利用 <a href="mailto:npm@5.2.0" target="_blank" rel="noopener">npm@5.2.0</a> 所自带的 npm 包运行器将 <code>./node_modules/.bin/babel</code> 命令缩短为 <code>npx babel</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel src --out-dir lib</span><br></pre></td></tr></table></figure><p>2）browserify工具打包require()成AMD规范。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify  main.js -o bundle.js</span><br></pre></td></tr></table></figure><h2 id="使用webpack打包文件"><a href="#使用webpack打包文件" class="headerlink" title="使用webpack打包文件"></a>使用webpack打包文件</h2><ol><li>写 <code>webpack.config.js</code>文件，具体语法参考链接<a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">webpack文档</a></li><li>运行命令 <code>npx webpack</code>，将自动调用<code>webpack.config.js</code>的配置打包文件，在<code>dist</code>文件夹下生成打包后的<code>main.js</code>文件</li><li>在<code>index.html</code>文件中，引入打包后的<code>main.js</code>文件</li></ol><p><strong>打包过程中出现报错</strong><br>因为 js 文件使用了 es6 语法，需要先将 es6 语法编译成 es5 语法，使用 babel 进行编译，再进行打包，将这个过程写入了<code>webpack.config.js</code>文件。</p><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><ul><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/add" target="_blank" rel="noopener"><code>yarn add [package] --dev</code></a> 安装包,–dev安装到开发环境。</li><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/run" target="_blank" rel="noopener"><code>yarn run</code></a> 运行脚本。</li><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/init" target="_blank" rel="noopener"><code>yarn init</code></a>  初始化项目。</li><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/install" target="_blank" rel="noopener"><code>yarn install</code></a>: 安装 package.json 清单上的包，简洁指令：yarn</li><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/publish" target="_blank" rel="noopener"><code>yarn publish</code></a>: 发布你的包到包管理器上</li><li><a href="https://yarnpkg.com/zh-Hant/docs/cli/remove" target="_blank" rel="noopener"><code>yarn remove</code></a>: 移除已安装的包</li></ul><h2 id="HTTP、TCP、Socket、TSL、HTTPS、CA证书关系"><a href="#HTTP、TCP、Socket、TSL、HTTPS、CA证书关系" class="headerlink" title="HTTP、TCP、Socket、TSL、HTTPS、CA证书关系"></a>HTTP、TCP、Socket、TSL、HTTPS、CA证书关系</h2><p><strong>参考链接</strong>：<a href="https://blog.csdn.net/u014465934/article/details/83476115" target="_blank" rel="noopener">HTTP、TCP、Socket、TSL、HTTPS、CA证书</a></p><ul><li>HTTP 协议需要依靠 TCP 协议来传输数据，是应用层协议</li><li>TCP连接需要连接经过“三次握手”，断开经过“四次握手”</li><li>传输层协议：TCP保证数据到达，UDP不保证数据到达</li><li>套接字（socket）：应用层可以 和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务</li><li>Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</li><li>HTTPS优点：保密性（防泄密）、完整性（防篡改）、真实性（防假冒）</li><li>CA证书：证书信任链类似树结构</li><li>CA证书的作用:验证网站是否可信（针对HTTPS）； 验证某文件是否可信（是否被篡改）</li></ul><h2 id="今天做了什么？"><a href="#今天做了什么？" class="headerlink" title="今天做了什么？"></a>今天做了什么？</h2><ol><li>了解 node 并练习操作了 node 的 fs 文件系统模块</li><li>了解 webpack 的基本语法</li><li>使用 babel 进行编译和 webpack 打包项目</li><li>整理课堂提及知识点，撰写日志</li></ol><h2 id="明天要做什么？"><a href="#明天要做什么？" class="headerlink" title="明天要做什么？"></a>明天要做什么？</h2><ol><li>深入了解webpack和相应的配置语法</li><li>开始写webpack考核作业</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-17</title>
      <link href="/2019/07/17/2019-07-17/"/>
      <url>/2019/07/17/2019-07-17/</url>
      
        <content type="html"><![CDATA[<p>Object.fromEntries(iterable)、async await</p><a id="more"></a><h2 id="Object-fromEntries-iterable"><a href="#Object-fromEntries-iterable" class="headerlink" title="Object.fromEntries(iterable)"></a>Object.fromEntries(iterable)</h2><p>作用：把键值对列表转换为一个对象，iterable可迭代对象，类似 Array 、 Map 或者其它实现了可迭代协议的对象。<br>Object.fromEntries() 是 Object.entries 的反转。</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p>参考链接：(async/await的基础用法)[<a href="https://www.jianshu.com/p/73b070eebf50]" target="_blank" rel="noopener">https://www.jianshu.com/p/73b070eebf50]</a><br>参考博客：(js async await 终极异步解决方案)[<a href="https://www.cnblogs.com/CandyManPing/p/9384104.html]" target="_blank" rel="noopener">https://www.cnblogs.com/CandyManPing/p/9384104.html]</a></p><h3 id="1、什么是promise"><a href="#1、什么是promise" class="headerlink" title="1、什么是promise"></a>1、什么是promise</h3><p>Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及其返回的值。</p><p>Promise 对象是由关键字 new 及其构造函数来创建的。构造函数会，把一个叫做“处理器函数”（executor function）的函数作为它的参数。这个“处理器函数”接受两个函数resolve 和 reject 作为其参数。当异步任务顺利完成且返回结果值时，会调用 resolve 函数，而当异步任务失败且返回失败原因（通常是一个错误对象）时，会调用reject 函数。</p><p><strong>promise 状态</strong>　　　　<br>pending：初始状态，既不是成功，也不是失败状态<br>fulfilled：操作成功<br>rejected：操作失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="number">2</span>         setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>             resolve(<span class="string">'foo'</span>);</span><br><span class="line"><span class="number">4</span>         &#125;, <span class="number">300</span>);</span><br><span class="line"><span class="number">5</span>     &#125;);</span><br><span class="line"><span class="number">6</span>     promise1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="number">7</span>         <span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="number">8</span>         <span class="comment">// foo 9     &#125;);</span></span><br></pre></td></tr></table></figure><p>通过外部then() 方法来绑定成功、失败的回调函数，有没有感觉这个跟之前的ajax 差不多，只不过是我们把回调丢到了then() 中，这个then 并且支持链式操作，即如果存在多个嵌套那么也就是不断的then()。</p><h3 id="2、async-await理解"><a href="#2、async-await理解" class="headerlink" title="2、async await理解"></a>2、async await理解</h3><p>async 是“异步”的意思，而 await 是等待的意思。</p><p>async 用于申明一个 异步的function（实际上是async function 对象），而 await 用于等待一个异步任务执行完成的的结果。</p><p><strong>await 只能出现在 async 函数中。</strong></p><h3 id="3、async返回promise对象"><a href="#3、async返回promise对象" class="headerlink" title="3、async返回promise对象"></a>3、async返回promise对象</h3><p>async 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。所以 可以使用 then() 链来处理这个 Promise 对象，</p><p>async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。</p><h3 id="4、await命令"><a href="#4、await命令" class="headerlink" title="4、await命令"></a>4、await命令</h3><p>正常情况下，<strong>await 命令后面是一个 Promise 对象</strong>。<strong>如果不是，会被转成一个立即 resolve 的 Promise 对象。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>上面代码中，await 命令的参数是数值123，它被转成 Promise 对象，并立即 resolve。</p><p><strong>await 命令后面的 Promise 对象如果变为 reject 状态，则 reject 的参数会被 catch 方法的回调函数接收到。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p><strong>注意，上面代码中，await 语句前面没有 return，但是 reject 方法的参数依然传入了 catch 方法的回调函数。这里如果在 await 前面加上 return，效果是一样的。</strong></p><p>只要一个 await 语句后面的 Promise 变为 reject，那么整个 async 函数都会中断执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello world'</span>); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<strong>第二个 await 语句是不会执行的，因为第一个 await 语句状态变成了 reject</strong>。</p><p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个 await 放在 <strong>try…catch 结构</strong>里面，这样不管这个异步操作是否成功，第二个 await 都会执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p><strong>如果有多个 await 命令，可以统一放在 try…catch 结构中。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = <span class="keyword">await</span> firstStep();</span><br><span class="line">    <span class="keyword">const</span> val2 = <span class="keyword">await</span> secondStep(val1);</span><br><span class="line">    <span class="keyword">const</span> val3 = <span class="keyword">await</span> thirdStep(val1, val2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Final: '</span>, val3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-16</title>
      <link href="/2019/07/16/2019-07-16/"/>
      <url>/2019/07/16/2019-07-16/</url>
      
        <content type="html"><![CDATA[<p><strong>node爬虫</strong>：优势和劣势、准备工作、语法知识点<br><strong>持续继承gitlab-ci.yml</strong>：实现上传代码到github，自动将静态页面部署到码云上</p><a id="more"></a><h2 id="node爬虫"><a href="#node爬虫" class="headerlink" title="node爬虫"></a>node爬虫</h2><p><strong>参考链接</strong>：<br><a href="https://blog.csdn.net/yc123h/article/details/51337352" target="_blank" rel="noopener">用Nodejs做爬虫</a></p><h3 id="node爬虫优势和劣势"><a href="#node爬虫优势和劣势" class="headerlink" title="node爬虫优势和劣势"></a>node爬虫优势和劣势</h3><ul><li>驱动语言是JavaScript，优势就是对网页上的dom元素进行操作，在网页操作上这是别的语言无法比拟的。</li><li>nodejs是单线程异步的。优势就是在并发爬取页面上，一个页面未返回不会阻塞后面的页面继续加载，要做到这个不用像python那样需要多线程。</li><li>异步并发上，用node不做异步处理话，那返回的结果可不一定是按1、2、3、4……这个顺序，很可能是随机。解决的办法就是增加一个页面的序列戳，让爬取的数据生成csv文件，然后重新排序。</li><li>数据处理上，无法做回归聚类分析，只能单纯用来爬取数据。</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>初始化项目文件：npm init来初始化一个package.json文件</p></li><li><p>安装依赖包<br>request ：建立起对目标网页的链接，并返回相应的数据；<br>cheerio ：用来操作dom元素的，类似jquery, 参考链接 (cheerio中文文档)[<a href="https://www.jianshu.com/p/629a81b4e013]" target="_blank" rel="noopener">https://www.jianshu.com/p/629a81b4e013]</a> ;<br>url : 用于处理与解析 URL, 参考链接(Node.js v10.16.0 文档)[<a href="http://nodejs.cn/api/url.html]" target="_blank" rel="noopener">http://nodejs.cn/api/url.html]</a> ;<br>fs : 操作文件系统，参考链接(Node.js v10.16.0 文档)[<a href="http://nodejs.cn/api/fs.html]" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html]</a> ;<br>path : 提供用于处理文件路径和目录路径的实用工具，参考链接(Node.js v10.16.0 文档)[<a href="http://nodejs.cn/api/path.html]" target="_blank" rel="noopener">http://nodejs.cn/api/path.html]</a> ;<br>https: 提供请求和监听等链接操作，参考链接(Node.js v10.16.0 文档)[<a href="http://nodejs.cn/api/fs.html]" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html]</a> ; </p></li><li><p>引入依赖包并使用</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">"request"</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>设置请求头</p></li><li><p>并发控制<br><code>npm install async --save</code>来安装并通过<code>var async = require(&quot;async&quot;)</code>来引入</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.mapLimit(<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>))</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">fetch(url,callback)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="node语法知识点"><a href="#node语法知识点" class="headerlink" title="node语法知识点"></a>node语法知识点</h3><ul><li><code>item =&gt; !!item</code> 根本目的是把undefine、null等值顺便转换为boolean类型。因为取反的过程中会自动给它们进行类型转换。</li><li><code>JSON.stringify(value[, replacer [, space]])</code><br><code>value</code> : 将要序列化成 一个JSON 字符串的值。<br><code>replacer</code> : 如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例。<br><code>space</code> : 指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。</li></ul><h2 id="持续继承gitlab-ci-yml"><a href="#持续继承gitlab-ci-yml" class="headerlink" title="持续继承gitlab-ci.yml"></a>持续继承gitlab-ci.yml</h2><ul><li><p>持续集成平台<br>gitlab-ci<br>jenkins<br>Ant design: travis.yml、.circleml/config.yml</p></li><li><p>更改脚本自动发布文件，更新页面</p></li><li><p>持续集成就是提供一个虚拟机，编译发布脚本</p></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>在choerodon上新建项目</li><li>克隆下来项目</li><li>修改项目 code .git/config , 将新建项目的链接改掉 [remote “origin”] , 然后push项目到新建项目上</li><li>在码云上创建项目</li><li>在choerodon的配置栏目上增加一个config.yml文件</li><li>$ hs -o</li><li>$ git config remote.origin.url 获取当前仓库地址</li><li>配置密钥，在码云上开启 git pages 服务，新建 .gitlab-ci.yml</li><li>忽略 dist 的版本控制</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 持续继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-15</title>
      <link href="/2019/07/15/2019-07-15/"/>
      <url>/2019/07/15/2019-07-15/</url>
      
        <content type="html"><![CDATA[<p><strong>Promise实现原理</strong><br><strong>co源码实现原理</strong>：generator、generator异步编程、co原理、并发异步操作<br><strong>补录</strong>：Array.reduce()、fectch()</p><a id="more"></a><h2 id="Promise实现原理"><a href="#Promise实现原理" class="headerlink" title="Promise实现原理"></a>Promise实现原理</h2><p><strong>参考链接</strong>：<br><a href="https://www.jianshu.com/p/43de678e918a" target="_blank" rel="noopener">Promise实现原理（附源码）</a><br><a href="https://www.jianshu.com/p/98a6f7634f59" target="_blank" rel="noopener">promise原理，实现一个简单promise</a></p><ol><li><p><code>Promise</code> 基本结构<br>构造函数 Promise 必须接受一个函数作为参数，我们称该函数为 handle ， handle 又包含 resolve 和 reject 两个参数，它们是两个函数。</p></li><li><p><code>Promise</code> 状态和值</p></li></ol><ul><li>三种状态：<code>Pending(进行中)、Fulfilled(已成功)、Rejected(已失败)</code></li><li>状态只能由 Pending 变为  Fulfilled 或由  Pending  变为 Rejected  ，且状态改变之后不会在发生变化，会一直保持这个状态。</li><li><strong>resolve</strong> : 将 Promise 对象的状态从 Pending (进行中) 变为 Fulfilled (已成功)</li></ul><p><strong>reject</strong> : 将 Promise 对象的状态从 Pending (进行中) 变为 Rejected (已失败)<br><strong>resolve 和 reject</strong> 都可以传入任意类型的值作为实参，表示  Promise  对象成功（ Fulfilled ）和失败（ Rejected ）的值</p><ol start="3"><li><code>Promise</code>的<code>then</code>方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected) <span class="comment">//接受两个可选参数</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>如果 onFulfilled 或 onRejected 不是函数，其必须被忽略</li><li><code>onFulfilled</code>和<code>onRejected</code>特性<br>成功或失败后必须被调用；promise 状态改变前不可调用；调用次数不能超过一次。</li><li>多次调用<br>then 方法可以被同一个 promise 对象调用多次，成功或者失败后，所有 onFulfilled 和 onRejected 需按照其注册顺序依次回调。</li><li>then 方法必须返回一个新的 promise 对象</li><li>promise 支持链式调用</li></ul><ol start="4"><li><code>finally</code> 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作</li><li><code>catch</code> 方法，相当于调用 then 方法, 但只传入 Rejected 状态的回调函数</li><li>静态 <code>resolve</code> 方法</li><li>静态 <code>reject</code> 方法</li><li>静态 <code>all</code> 方法：所有状态都变成fulfilled时返回的PromiseNew状态就变成fulfilled</li><li>静态 <code>race</code> 方法：只要有一个实例率先改变状态，新的PromiseNew的状态就跟着改变</li></ol><h3 id="我的实现代码"><a href="#我的实现代码" class="headerlink" title="我的实现代码"></a>我的实现代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyPromise类实现原理</span></span><br><span class="line"><span class="comment"> * 构造函数传入一个function，有两个参数，resolve：成功回调; reject：失败回调</span></span><br><span class="line"><span class="comment"> * state: 存储状态, pending-进行中 resolved-成功 rejected-失败</span></span><br><span class="line"><span class="comment"> * resolvedCbQueues: 成功回调函数队列</span></span><br><span class="line"><span class="comment"> * rejectedCbQueues: 失败回调函数队列</span></span><br><span class="line"><span class="comment"> * resolve: 更新state为：resolved，并且执行成功回调函数队列</span></span><br><span class="line"><span class="comment"> * reject: 更新state为：rejected，并且执行失败回调函数队列</span></span><br><span class="line"><span class="comment"> * then: 同时执行成功和失败回调函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.resolvedCbQueues = []; <span class="comment">//异步任务队列</span></span><br><span class="line">        <span class="keyword">this</span>.rejectedCbQueues = [];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过setTimeout控制执行顺序</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="string">'resolved'</span>;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">                <span class="comment">// 执行then里的方法并传入resolve的值</span></span><br><span class="line">                <span class="keyword">this</span>.resolvedCbQueues.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(<span class="keyword">this</span>.value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reject(value) &#123;</span><br><span class="line">        <span class="comment">//通过setTimeout控制执行顺序</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">                <span class="keyword">this</span>.rejectedCbQueues.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(<span class="keyword">this</span>.value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">        onRejected =</span><br><span class="line">            <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span></span><br><span class="line">                ? onRejected</span><br><span class="line">                : <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err</span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.resolvedCbQueues.push(onFulfilled);</span><br><span class="line">            <span class="keyword">this</span>.rejectedCbQueues.push(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'resolved'</span>) &#123;</span><br><span class="line">            onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// catch方法</span></span><br><span class="line">    <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无论成功还是失败，都执行</span></span><br><span class="line">    <span class="keyword">finally</span>(cb) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">            value =&gt; MyPromise.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),</span><br><span class="line">            reason =&gt; MyPromise.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态resolve方法，返回一个promise对象</span></span><br><span class="line">    <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">        <span class="comment">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态reject方法</span></span><br><span class="line">    <span class="keyword">static</span> reject(value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态all方法, 存在错误待完善</span></span><br><span class="line">    <span class="keyword">static</span> all(list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'all() must accept a array as a parameter'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> values = [], count = list.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">                <span class="comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class="line">                <span class="keyword">this</span>.resolve(list[i]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    values[i] = res;</span><br><span class="line">                    <span class="comment">// console.log(i, values);</span></span><br><span class="line">                    <span class="comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class="line">                    --count &lt; <span class="number">1</span> &amp;&amp; resolve(values);</span><br><span class="line">                &#125;, reject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态race方法, 存在错误待完善</span></span><br><span class="line">    <span class="keyword">static</span> race(list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'all() must accept a array as a parameter'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> list) &#123;</span><br><span class="line">                <span class="comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class="line">                <span class="keyword">this</span>.resolve(p).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;, reject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="comment">// new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     resolve("success");</span></span><br><span class="line"><span class="comment">//     // reject("fail");</span></span><br><span class="line"><span class="comment">// &#125;).then((val) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log("测试then()", val);</span></span><br><span class="line"><span class="comment">// &#125;).catch(e =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log("测试catch()", e);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log("测试resolve()", MyPromise.resolve("success"));</span></span><br><span class="line"><span class="comment">// console.log("测试reject()", MyPromise.reject("fail"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MyPromise.all([</span></span><br><span class="line"><span class="comment">//     new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; resolve(1), 1000);</span></span><br><span class="line"><span class="comment">//     &#125;),</span></span><br><span class="line"><span class="comment">//     new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; resolve(2), 2000);</span></span><br><span class="line"><span class="comment">//     &#125;),</span></span><br><span class="line"><span class="comment">//     new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; resolve(3), 3000);</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// ]).then((val) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log("测试all()", val);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MyPromise.race([</span></span><br><span class="line"><span class="comment">//     new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; resolve(1), 100);</span></span><br><span class="line"><span class="comment">//     &#125;),</span></span><br><span class="line"><span class="comment">//     new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; resolve(2), 200);</span></span><br><span class="line"><span class="comment">//     &#125;),</span></span><br><span class="line"><span class="comment">//     new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; reject(3), 300);</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// ]).then((val) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log("测试race()", val);</span></span><br><span class="line"><span class="comment">// &#125;).catch((e) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(e);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老师测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">3000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我3秒后被输出'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="co源码实现原理"><a href="#co源码实现原理" class="headerlink" title="co源码实现原理"></a>co源码实现原理</h2><p><strong>参考链接</strong> ：<br><a href="https://blog.csdn.net/weixin_38801333/article/details/80748910" target="_blank" rel="noopener">co的源码简读</a><br><a href="http://www.ruanyifeng.com/blog/2015/05/co.html" target="_blank" rel="noopener">co 函数库的含义和用法</a></p><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ul><li>声明函数需要在 function 之后加 <code>*</code></li><li>函数类型为<code>&quot;GeneratorFunction&quot;</code></li><li>函数调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成一个generator，函数体不执行</span></span><br><span class="line"><span class="keyword">var</span> genFn = gen()</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行到第一个yield语句，返回&#123;done:false,value:'hello'&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = genFn.next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行第一个yield到第二个yield的语句，包括第二个yield语句。</span></span><br><span class="line"><span class="keyword">var</span> b = genFn.next(a.value)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行 return</span></span><br><span class="line"><span class="keyword">var</span> res = genF.next(b.value)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果继续执行genF.next，返回&#123;done:true,value:undefined&#125;</span></span><br></pre></td></tr></table></figure><ul><li>最大的优势是：通过next控制函数体的执行流。因此，异步变同步的编程就可以通过generator很容易的实现。、</li></ul><h3 id="generator异步编程"><a href="#generator异步编程" class="headerlink" title="generator异步编程"></a>generator异步编程</h3><p>使用同步方式写异步代码</p><ol><li>分离异步函数的 callback() ；</li><li>通过 yield 返回异步函数；</li><li>通过运行器执行generator</li></ol><h3 id="co原理"><a href="#co原理" class="headerlink" title="co原理"></a>co原理</h3><ul><li><p><code>co</code> 函数接受 <code>Generator</code> 函数作为参数，返回一个 Promise 对象。</p></li><li><p>在返回的 <code>Promise</code> 对象里面，<code>co</code>先检查参数 <code>gen</code> 是否为 <code>Generator</code> 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 <code>Promise</code> 对象的状态改为 <code>resolved</code> 。</p></li><li><p>接着，<code>co</code> 将 <code>Generator</code> 函数的内部指针对象的 next 方法，包装成 <code>onFulefilled</code> 函数。这主要是为了能够捕捉抛出的错误。</p></li><li><p>最后，就是关键的 <code>next</code> 函数，它会反复调用自身。</p></li><li><p>其中， <code>next</code> 函数内部逻辑：<br>第一行，检查当前是否为 <code>Generator</code> 函数的最后一步，如果是就返回。<br>第二行，确保每一步的返回值，是 <code>Promise</code> 对象。<br>第三行，使用 <code>then</code> 方法，为返回值加上回调函数，然后通过 <code>onFulfilled</code> 函数再次调用 <code>next</code> 函数。<br>第四行，在参数不符合要求的情况下（参数非 <code>Thunk</code> 函数和 <code>Promise</code> 对象），将 <code>Promise</code> 对象的状态改为 <code>rejected</code>，从而终止执行。</p></li></ul><h3 id="并发异步操作"><a href="#并发异步操作" class="headerlink" title="并发异步操作"></a>并发异步操作</h3><p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 数组的写法</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> [</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(<span class="number">2</span>)</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的写法</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    <span class="number">2</span>: <span class="built_in">Promise</span>.resolve(<span class="number">2</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;).catch(onerror);</span><br></pre></td></tr></table></figure><h3 id="我的实现代码-1"><a href="#我的实现代码-1" class="headerlink" title="我的实现代码"></a>我的实现代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoRunGen</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 为了控制对象的一致性，采用call()和apply()</span></span><br><span class="line">        <span class="comment">//通过co(gen).bind(this)将this传递给gen</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> gen == <span class="string">'function'</span>) gen = gen.call(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gen || <span class="keyword">typeof</span> gen.next !== <span class="string">'function'</span>) <span class="keyword">return</span> resolve(gen);</span><br><span class="line"></span><br><span class="line">        onFulFilled();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onFulFilled</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ret = gen.next(res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">            next(ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ret = gen.throw(err);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">            next(ret);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">ret</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//检查当前是否为 Generator 函数的最后一步，如果是就返回</span></span><br><span class="line">            <span class="keyword">if</span> (ret.done) <span class="keyword">return</span> resolve(ret.value);</span><br><span class="line">            <span class="comment">// 确保每一步的返回值，是 Promise 对象</span></span><br><span class="line">            <span class="keyword">let</span> value = toPromise.call(ctx,ret.value);</span><br><span class="line">            <span class="comment">// 使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数</span></span><br><span class="line">            <span class="keyword">if</span> (value &amp;&amp; isPromise(value)) <span class="keyword">return</span> value.then(onFulFilled, onRejected);</span><br><span class="line">            <span class="comment">// 在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。</span></span><br><span class="line">            <span class="keyword">return</span> onRejected(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'You may only yield a function, promise, generator, array, or object, '</span></span><br><span class="line">                + <span class="string">'but the following object was passed: "'</span> + <span class="built_in">String</span>(ret.value) + <span class="string">'"'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//promise化，趋向主流：异步返回promise</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">toPromise</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!obj) <span class="keyword">return</span> obj;</span><br><span class="line">            <span class="keyword">if</span> (isPromise(obj)) <span class="keyword">return</span> obj;</span><br><span class="line">            <span class="keyword">if</span> (isFunction(obj)) <span class="keyword">return</span> thunkToPromise(obj);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'function'</span> == <span class="keyword">typeof</span> obj.then;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'function'</span> == <span class="keyword">typeof</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">thunkToPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                fn(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchStepGen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'https://api.github.com/users/github'</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">    <span class="comment">// console.log(result);</span></span><br><span class="line">    <span class="keyword">var</span> jsonData = <span class="keyword">yield</span> result.json();</span><br><span class="line">    <span class="built_in">console</span>.log(jsonData.bio); <span class="comment">// "How people build software."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// var r1 = yield fetch('http://test.letwz.com/get_text1', &#123; method: 'GET' &#125;);</span></span><br><span class="line">    <span class="comment">// var json1 = yield r1.json();</span></span><br><span class="line">    <span class="comment">// var r2 = yield fetch('http://test.letwz.com/get_text2', &#123; method: 'GET' &#125;);</span></span><br><span class="line">    <span class="comment">// var json2 = yield r2.json();</span></span><br><span class="line">    <span class="comment">// var r3 = yield fetch('http://test.letwz.com/post_text1', &#123; method: 'POST' &#125;);</span></span><br><span class="line">    <span class="comment">// var json3 = yield r3.json();</span></span><br><span class="line">    <span class="comment">// console.log(json1);</span></span><br><span class="line">    <span class="comment">// console.log(json2);</span></span><br><span class="line">    <span class="comment">// console.log(json3);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">autoRunGen(fetchStepGen);</span><br></pre></td></tr></table></figure><hr><h2 id="补录："><a href="#补录：" class="headerlink" title="补录："></a>补录：</h2><h3 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce()"></a>Array.reduce()</h3><p><code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code><br>参数|解释<br>:–:|:–:<br>total |    必需。初始值, 或者计算结束后的返回值。<br>currentValue |    必需。当前元素<br>currentIndex  |    可选。当前元素的索引<br>arr |    可选。当前元素所属的数组对象。</p><ul><li>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li><li>reduce() 可以作为一个高阶函数，用于函数的 compose。</li><li>注意: reduce() 对于空数组是不会执行回调函数的。</li></ul><h3 id="fectch"><a href="#fectch" class="headerlink" title="fectch()"></a>fectch()</h3><p>fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。但是，一定记住fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。</p><p><strong>优势</strong></p><ol><li>语法简洁，更加语义化</li><li>基于标准 Promise 实现，支持 async/await</li><li>同构方便，使用 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener">isomorphic-fetch</a></li><li>更加底层，提供的API丰富（request, response）</li><li>脱离了XHR，是ES规范里新的实现方式</li></ol><p><strong>缺点</strong></p><ol><li>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li><li>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})</li><li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li><li>fetch没有办法原生监测请求的进度，而XHR可以</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-12</title>
      <link href="/2019/07/12/2019-07-12/"/>
      <url>/2019/07/12/2019-07-12/</url>
      
        <content type="html"><![CDATA[<p><strong>Class基本语法</strong>：简介、类的实例、class表达式、注意点、静态方法、实例属性新写法、静态属性、私有方法和私有属性、new.target属性；<br><strong>Class继承</strong>：简介、类的prototype属性和<strong>proto</strong>属性、实例的<strong>proto</strong>属性、原生构造函数的继承、Mixin 模式的实现；<br>Module语法：概述、严格模式、export命令、import命令、export default 命令、import &amp;&amp; export 复合写法、跨模块常量、import()函数；<br><strong>Module的加载实现</strong>：浏览器加载脚本原理、es6加载模块、es6加载外部脚本模块；<br><strong>对象新增方法</strong>：Object.is()；<br><strong>Promise</strong>：含义、基本语法；<br><strong>Iterator 和 for…of 循环</strong>：Iterator的概念、默认Iterator接口。</p><a id="more"></a><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><hr><h2 id="Class基本语法"><a href="#Class基本语法" class="headerlink" title="Class基本语法"></a>Class基本语法</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>es5的<code>Point.prototype.toString()</code>方法，在es6简写成如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>类的所有方法都定义在类的<code>prototype</code>属性上面</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">b.constructor === B.prototype.constructor <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>Object.assign</code>方法可以很方便地一次向类添加多个方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Point.prototype, &#123;</span><br><span class="line">  toString()&#123;&#125;,</span><br><span class="line">  toValue()&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>类的内部所有定义的方法，都是不可枚举的（non-enumerable）。这一点与 ES5 的行为不一致。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype)<span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class="line"><span class="comment">// ["constructor","toString"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es5写法</span></span><br><span class="line"><span class="keyword">var</span> Point = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype)<span class="comment">// ["toString"]</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class="line"><span class="comment">// ["constructor","toString"]</span></span><br></pre></td></tr></table></figure><ol start="5"><li>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。</li></ol><h3 id="类的实例"><a href="#类的实例" class="headerlink" title="类的实例"></a>类的实例</h3><ol><li>同es5，类的所有实例共享一个原型对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__ === p2.__proto__</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>同es5，可以通过实例的<code>__proto__</code>属性为“类”添加方法，不推荐用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure><h3 id="取值函数getter和存值函数setter"><a href="#取值函数getter和存值函数setter" class="headerlink" title="取值函数getter和存值函数setter"></a>取值函数getter和存值函数setter</h3><ol><li>同es5，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</li><li>存值函数和取值函数是设置在属性的<code>Descriptor</code>对象上的。</li></ol><h3 id="class表达式"><a href="#class表达式" class="headerlink" title="class表达式"></a>class表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需要注意的是，这个类的名字是Me，但是Me只在 Class 的内部可用，</span></span><br><span class="line"><span class="comment">指代当前类。在 Class 外部，这个类只能用MyClass引用。*/</span></span><br><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.getClassName() <span class="comment">// Me</span></span><br><span class="line">Me.name <span class="comment">// ReferenceError: Me is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。</span></span><br><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>类和模块的内部，默认就是严格模式，所以不需要使用<code>use strict</code>指定运行模式。</li><li>同es5，类不存在变量提升（hoist）</li><li>如果某个方法之前加上星号（*），就表示该方法是一个<code>Generator</code>函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Foo类的Symbol.iterator方法前有一个星号，</span></span><br><span class="line"><span class="comment">表示该方法是一个 Generator 函数。</span></span><br><span class="line"><span class="comment">Symbol.iterator方法返回一个Foo类的默认遍历器，</span></span><br><span class="line"><span class="comment">for...of循环会自动调用这个遍历器。*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.args = args;</span><br><span class="line">  &#125;</span><br><span class="line">  * [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> <span class="keyword">this</span>.args) &#123;</span><br><span class="line">      <span class="keyword">yield</span> arg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="keyword">new</span> Foo(<span class="string">'hello'</span>, <span class="string">'world'</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br></pre></td></tr></table></figure><ul><li>类的方法内部如果含有<code>this</code>，它默认指向类的实例。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  printName(name = <span class="string">'there'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>); </span><br><span class="line">    <span class="comment">//修改为</span></span><br><span class="line">    <span class="comment">//this.printName = this.printName.bind(this);</span></span><br><span class="line">    <span class="comment">//或者（箭头函数内部的this总是指向定义时所在的对象）</span></span><br><span class="line">    <span class="comment">//this.getThis = () =&gt; this;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  print(text) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</span><br><span class="line">printName(); <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></span><br><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">printName方法中的this，默认指向Logger类的实例。</span></span><br><span class="line"><span class="comment">但是，如果将这个方法提取出来单独使用，</span></span><br><span class="line"><span class="comment">this会指向该方法运行时所在的环境（由于 class 内部是严格模式，</span></span><br><span class="line"><span class="comment">所以 this 实际指向的是undefined），从而导致找不到print方法而报错。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li><code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用；</li><li>注意，如果静态方法包含<code>this</code>关键字，这个<code>this</code>指的是类，而不是实例；</li><li>静态方法可以与非静态方法重名；</li><li>父类的静态方法，可以被子类继承；</li><li>父类静态方法也是可以在子类的<code>super</code>对象上调用的。</li></ul><h3 id="实例属性新写法"><a href="#实例属性新写法" class="headerlink" title="实例属性新写法"></a>实例属性新写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreasingCounter</span> </span>&#123;</span><br><span class="line">   _count = <span class="number">0</span>;  <span class="comment">// es6新写法</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// this._count = 0; // 一般写法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> value() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Getting the current value!'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._count;</span><br><span class="line">  &#125;</span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="keyword">this</span>._count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性指的是 <code>Class</code>本身的属性，即<code>Class.propName</code>，而不是定义在实例对象（this）上的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.prop = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> prop = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h3><p>是指只能在类的内部访问的方法和属性，但ES6 不提供，只能通过变通方法模拟实现，具体查看文档。</p><h3 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h3><ul><li>ES6 为<code>new</code>命令引入了一个<code>new.target</code>属性，该属性一般用在构造函数之中，返回<code>new</code>命令作用于的那个构造函数。如果构造函数不是通过<code>new</code>命令或<code>Reflect.construct()</code>调用的，<code>new.target</code>会返回<code>undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span>.target === Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须使用 new 命令生成实例'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Class 内部调用<code>new.target</code>，返回当前<code>Class</code>。</li><li>子类继承父类时，<code>new.target</code>会返回子类。</li><li>在函数外部，使用<code>new.target</code>会报错。</li></ul><hr><h2 id="Class继承"><a href="#Class继承" class="headerlink" title="Class继承"></a>Class继承</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>使用<code>extends</code>关键字，具体写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> returnParent = <span class="function">(<span class="params">beNull</span>) =&gt;</span> beNull ? <span class="literal">null</span> : <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">returnParent</span>(<span class="title">true</span>) </span>&#123;&#125; <span class="comment">//可调用函数返回类</span></span><br><span class="line">assert.equal(<span class="built_in">Object</span>.getPrototypeOf(B.prototype), <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。如果不调用<code>super</code>方法，子类就得不到this对象。</li><li>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（<code>Parent.apply(this)</code>）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到<code>this</code>上面（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改this。</li><li>父类的静态方法，也会被子类继承。</li><li><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类，判断一个类是否继承了另一个类。</li><li>继承可以继承<code>null</code>,比如 <code>class A extends null{...}</code> </li></ul><h3 id="类的prototype属性和proto属性"><a href="#类的prototype属性和proto属性" class="headerlink" title="类的prototype属性和proto属性"></a>类的prototype属性和<strong>proto</strong>属性</h3><ul><li>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</li><li>子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的prototype属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="实例的proto属性"><a href="#实例的proto属性" class="headerlink" title="实例的proto属性"></a>实例的<strong>proto</strong>属性</h3><p>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p><h3 id="原生构造函数的继承"><a href="#原生构造函数的继承" class="headerlink" title="原生构造函数的继承"></a>原生构造函数的继承</h3><ul><li><p>原生构造函数有<br>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()</p></li><li><p>es5 原生构造函数是无法继承，es6 可以继承</p></li></ul><h3 id="Mixin-模式的实现"><a href="#Mixin-模式的实现" class="headerlink" title="Mixin 模式的实现"></a>Mixin 模式的实现</h3><ul><li><code>Mixin</code> 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。</li><li><code>mix</code>函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。（具体Mix函数实现参考文档）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistributedEdit</span> <span class="keyword">extends</span> <span class="title">mix</span>(<span class="title">Loggable</span>, <span class="title">Serializable</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Module语法"><a href="#Module语法" class="headerlink" title="Module语法"></a>Module语法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><code>CommonJS</code> 和 <code>AMD</code> 模块，都只能在运行时确定这些东西。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.stat;</span><br><span class="line"><span class="keyword">let</span> exists = _fs.exists;</span><br><span class="line"><span class="keyword">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure><ul><li>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过<code>import</code>命令输入。</li></ul><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><ul><li>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上<code>&quot;use strict&quot;;</code>。</li><li>限制：ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。</li><li>具体要求如下：<ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止<code>this</code>指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li></ul></li></ul><h3 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h3><ul><li>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</li><li><code>expor</code>t命令除了输出变量，还可以输出函数或类（class）。</li><li><code>export</code>输出的变量就是本来的名字，但是可以使用<code>as</code>关键字重命名。 <code>export { innerName as outerName }</code></li></ul><h3 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>; </span><br><span class="line"><span class="comment">//as重命名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</span><br><span class="line"><span class="comment">// 加载全部模块，调用 circle.moduleName</span></span><br></pre></td></tr></table></figure><h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><ul><li><code>export default</code>命令，为模块指定默认输出；</li><li>一个模块只能有一个默认输出；</li><li>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</li><li><code>export default</code>命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><h3 id="import-amp-amp-export-复合写法"><a href="#import-amp-amp-export-复合写法" class="headerlink" title="import &amp;&amp; export 复合写法"></a>import &amp;&amp; export 复合写法</h3><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起，只是相当于对外转发了这两个接口，但内部不能使用其输入的变量。</p><h3 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h3><p>可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constants.js 模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test1.js 模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test2.js 模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="import-函数"><a href="#import-函数" class="headerlink" title="import()函数"></a>import()函数</h3><ul><li><code>import</code>命令会被<code>JavaScript</code> 引擎静态分析，先于模块内的其他语句执行（<code>import</code>命令叫做“连接” <code>binding</code> 其实更合适）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">'main'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//import()返回一个 Promise 对象。</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>.loadPageInto(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    main.textContent = err.message;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的</span></span><br><span class="line"><span class="comment">模块。另外，import()函数与所加载的模块没有静态连接关系，这点也是</span></span><br><span class="line"><span class="comment">与import语句不相同*/</span></span><br></pre></td></tr></table></figure><ul><li><p><code>import()</code>加载模块成功以后，这个模块会作为一个对象，当作<code>then</code>方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。</p></li><li><p>多种加载写法，如下：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./myModule.js'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">&#123;export1, export2&#125;</span>) =&gt;</span> &#123;  <span class="comment">//可用对象解构</span></span><br><span class="line">  <span class="comment">// ...·</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./myModule.js'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">myModule</span> =&gt;</span> &#123;  <span class="comment">//针对default输出接口</span></span><br><span class="line">  <span class="built_in">console</span>.log(myModule.default);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./myModule.js'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: theDefault&#125;</span>) =&gt;</span> &#123; <span class="comment">//更改为自己想要的名字</span></span><br><span class="line">  <span class="built_in">console</span>.log(theDefault);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([ <span class="comment">//同时加载多个模块</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./module1.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./module2.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./module3.js'</span>),</span><br><span class="line">])</span><br><span class="line">.then(<span class="function">(<span class="params">[module1, module2, module3]</span>) =&gt;</span> &#123;</span><br><span class="line">   ···</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Module的加载实现"><a href="#Module的加载实现" class="headerlink" title="Module的加载实现"></a>Module的加载实现</h2><h3 id="浏览器加载脚本原理"><a href="#浏览器加载脚本原理" class="headerlink" title="浏览器加载脚本原理"></a>浏览器加载脚本原理</h3><ul><li>由于浏览器脚本的默认语言是 JavaScript ，因此 type=”application/javascript” 可以省略。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"path/to/myModule.js"</span> defer&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"path/to/myModule.js"</span> <span class="keyword">async</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><script> 标签打开 defer 或 async 属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。- defer 和 async 区别defer 是“渲染完再执行”，async是“下载完就执行”。另外，如果有多个defer 脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。### es6加载模块- 浏览器对于带有`type="module"`的`<script>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了`<script>`标签的`defer`属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"./foo.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"./foo.js"</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>- async 属性也可以打开，但是打开后一旦加载完成后，页面会暂时中断当前渲染，执行当前模块后，再继续渲染。缺点：不会按照页面内容顺序进行渲染。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"./foo.js"</span> <span class="keyword">async</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>### es6加载外部脚本模块1. 模块代码运行在模块作用域，而不是全局作用域。外部无法访问内部顶层变量。2. 模块内部自动采用严格模式。3. 模块内部也可以使用import其他模块和export出接口。-------------------------------## 对象新增方法### Object.is()- 用来比较两个值是否严格相等，与严格比较运算符（`===`）的行为基本一致。- 不同之处只有两个：一是`+0`不等于`-0`，二是`NaN`等于自身。- 空字符串和`false`不相等。- `NaN`和`0/0`相等<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>--------------------------------------## Promise### 含义- 不会受外部影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。- 状态变化后，任何时候添加 then 都可以得到值。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。### 基本语法- `new Promise(function(resolve,reject){})`：resolve() 传参给成功函数，reject() 传参给失败函数。- `new Promise(()=>{}).then(()=>{},()=>{})`:返回仍然是 Promise 对象。第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。- `Promise.prototype.catch()`方法是`.then(null, rejection)`或`.then(undefined, rejection)`的别名，用于指定发生错误时的回调函数。  then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获，`eg. new Promise(()=>{}).then(()=>{}).catch(()=>{})`。  如果不调用catch()方法，即使出错了，Promise 内部的错误也不会影响到 Promise 外部的代码。- `Promise.prototype.finally()`不管成功执行还是失败，都会执行`finally()`代码块。finally本质上是then方法的特例。finally方法的回调函数不接受任何参数，既无法获知`Promise`状态是`fulfilled`，还是`rejected`。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>- `Promise.all([])` 接受的参数可以是数组，也可以是 Iterator 接口，且返回的每个成员都是 Promise 实例。只有数组中的 Promise 实例状态都为 fullfiled ， Promise 才能 fullfilled 。若数组中有一个的 Promise 对象状态为 rejected ，则 Promise 对象状态则为 rejected 。团体作战，同生共死。- `Promise.race([])` 接受的参数可以是数组，也可以是 Iterator 接口，且返回的每个成员都是 Promise 实例。如果数组中哪个 Promise 实例状态先为 fullfilled 或者 rejected ，则 Promise 对象状态也跟着改变。看谁跑得快，就抢占先机。- `Promise.resolve()` 作用是将现有对象转为 Promise 对象。参数可接收状态：1）Promise 实例； 2）一个thenable对象；3）不是具有then方法的对象，或根本就不是对象，比如字符串；4）不带有任何参数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsPromise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure>- `Promise.reject(reason)`方法也会返回一个新的 Promise 实例，该实例的状态为 rejected 。参数是一个thenable对象`{then(resolve,reject){}}` 。- `Promise.try()` 作用是，统一用promise.catch()捕获所有同步和异步的错误。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  database.users.get(&#123;<span class="attr">id</span>: userId&#125;)</span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Promise</span>.try(<span class="function"><span class="params">()</span> =&gt;</span> database.users.get(&#123;<span class="attr">id</span>: userId&#125;))</span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br></pre></td></tr></table></figure>--------------------------------------## Iterator 和 for...of 循环### Iterator的概念- `Iterator` 接口主要供for...of消费- 调用`next()`方法获取下一个成员，此时指针指向下一个成员，返回一个包含`value`和`done`两个属性的对象。其中，`value`属性是当前成员的值，`done`属性是一个布尔值，表示遍历是否结束。### 默认Iterator接口- ES6 规定，默认的 Iterator 接口部署在数据结构的`Symbol.iterator`属性，或者说，一个数据结构只要具有`Symbol.iterator`属性，就可以认为是“可遍历的”（`iterable`）。`Symbol.iterator`属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名`Symbol.iterator`，它是一个表达式，返回`Symbol`对象的`iterator`属性，这是一个预定义好的、类型为 `Symbol `的特殊值，所以要放在方括号内。- 原生具备 Iterator 接口的数据结构如下。ArrayMapSetStringTypedArray函数的 arguments 对象NodeList 对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*变量arr是一个数组，原生就具有遍历器接口，部署在arr的Symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。*/</span></span><br></pre></td></tr></table></figure>- `string`字符串的`Iterator`接口返回的类型为`[object String Iterator]`- `Iterator`没有`length`属性，即使使用`Array.from()`转为数组，也还是没有`length`属性</script>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-11</title>
      <link href="/2019/07/11/2019-07-11/"/>
      <url>/2019/07/11/2019-07-11/</url>
      
        <content type="html"><![CDATA[<p><strong>es6数组操作</strong>：entires()、keys()、values()；<br><strong>es6变量定义和解构</strong>：变量定义、数组解构、对象解构、特别注意、字符串解构、数值和布尔值解构、函数解构、圆括号、解构用途；<br><strong>es6对象字面量</strong>：属性简介表示法、属性名表达式；<br><strong>Set数据结构</strong><br><strong>函数扩展</strong>：箭头函数 &amp;&amp; this指向、参数设置、作用域、rest参数；<br><strong>字符串操作</strong>：str.includes()、str.repeat()、str.startsWith()、str.endsWith()；<br><strong>模板字符串</strong><br><strong>提交作业方式</strong>：使用自己的develop分支提交。</p><a id="more"></a><p><strong>参考链接</strong>：</p><ul><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6教程</a></li><li><a href="https://github.com/mqyqingfeng/Blog#es6-%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">冴羽的博客 ES6 系列目录</a></li></ul><h2 id="一、es6数组操作"><a href="#一、es6数组操作" class="headerlink" title="一、es6数组操作"></a>一、es6数组操作</h2><ul><li><p>[].entires()：返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="keyword">var</span> x = fruits.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo1"</span>).innerHTML = x.next().value;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = x.next().value;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo3"</span>).innerHTML = x.next().value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> entriesAsArray = <span class="built_in">Array</span>.from(arr.entries()); <span class="comment">//iterator转为数组</span></span><br><span class="line">assert.deepEqual(entriesAsArray, [[<span class="number">0</span>,<span class="string">"a"</span>], [<span class="number">1</span>,<span class="string">"b"</span>], [<span class="number">2</span>,<span class="string">"c"</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'one'</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">const</span> secondValue = <span class="built_in">Array</span>.from(arr.entries())[<span class="number">1</span>]; <span class="comment">//空值返回的是undefined</span></span><br><span class="line">assert.deepEqual(secondValue, [<span class="number">1</span>, <span class="keyword">void</span> <span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>[].keys()：对键名的遍历，从数组创建一个包含数组键的可迭代对象。如果对象是数组返回 true，否则返回 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.keys(); <span class="comment">//可使用next（）方法取值</span></span><br><span class="line">assert.deepEqual(iterator.next(), &#123;<span class="attr">value</span>: <span class="number">0</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">assert.deepEqual(iterator.next(), &#123;<span class="attr">value</span>: <span class="keyword">void</span> <span class="number">0</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> arr = [,,]; <span class="comment">//创建长度为2的数组</span></span><br><span class="line"><span class="keyword">const</span> keys = [...arr.keys()];</span><br><span class="line">assert.deepEqual(keys, [<span class="number">0</span>, <span class="number">1</span>]); <span class="comment">//对于已定义的数组，也会返回其key值</span></span><br></pre></td></tr></table></figure></li><li><p>[].values():对键值的遍历,从数组创建一个包含数组键值的可迭代对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'keys'</span>, <span class="string">'values'</span>, <span class="string">'entries'</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.values();</span><br><span class="line">iterator.next(); <span class="comment">//删除第一个元素值</span></span><br><span class="line">assert.deepEqual([...iterator], [<span class="string">'values'</span>, <span class="string">'entries'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...[...[...[...[]]]]];</span><br><span class="line"><span class="keyword">const</span> values = [...arr.values()]; <span class="comment">//对于空数组，不会返回其元素值</span></span><br><span class="line">assert.equal(values.length, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [,,];</span><br><span class="line"><span class="keyword">const</span> keys = [...arr.values()];</span><br><span class="line">assert.deepEqual(keys, [<span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">void</span> <span class="number">0</span>]); <span class="comment">//对于已定义的数组，返回undefined值</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、es6变量定义和解构"><a href="#二、es6变量定义和解构" class="headerlink" title="二、es6变量定义和解构"></a>二、es6变量定义和解构</h2><h4 id="1-变量定义"><a href="#1-变量定义" class="headerlink" title="1.变量定义"></a>1.变量定义</h4><ul><li>let是声明一个变量，作用域范围限于声明它的块中。可以在声明变量时为变量赋值，无法变量提升.<br>区别: var是声明一个变量,可以变量提升但无法赋值.</li><li>const必须初始化后并赋值,而且赋值之后不可修改.作用域范围可以全局.</li></ul><h4 id="2-数组解构"><a href="#2-数组解构" class="headerlink" title="2.数组解构"></a>2.数组解构</h4><ul><li><p><code>let [a, b, c] = [1, 2, 3];</code>给多个变量分别赋值</p></li><li><p><code>let [,,lastValue] = [1, 2, 3];</code> 给一个变量赋值</p></li><li><p>嵌套数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = [[<span class="string">'Some'</span>, <span class="string">'One'</span>], <span class="number">23</span>];</span><br><span class="line"><span class="keyword">const</span> [firstName, surname, age] =[...user[<span class="number">0</span>],user[<span class="number">1</span>]];</span><br></pre></td></tr></table></figure></li><li><p>解构不成功返回undefined,  <code>let [bar, foo] = [1];</code>  ,foo为undefined 。</p></li><li><p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p></li><li><p>Set 结构，也可以使用数组的解构赋值。</p><p><code>let [x, y, z] = new Set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);</code></p></li><li><p>解构赋值允许指定默认值。<br>注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。</p><p><code>let [x, y = &#39;b&#39;] = [&#39;a&#39;, undefined]; // x=&#39;a&#39;, y=&#39;b&#39;</code></p></li><li><p>null不严格等于undefined  </p><p><code>let [x = 1] = [null];</code></p></li><li><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>]; <span class="comment">//因为x能取到值，所以函数f根本不会执行</span></span><br></pre></td></tr></table></figure></li><li><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><p><code>let [x = 1, y = x] = [];     // x=1; y=1</code></p></li></ul><h4 id="3-对象解构"><a href="#3-对象解构" class="headerlink" title="3.对象解构"></a>3.对象解构</h4><ul><li><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><p><code>let { bar, foo } = { foo: &#39;aaa&#39;, bar: &#39;bbb&#39; };</code></p></li><li><p>如果解构失败，变量的值等于undefined。</p></li><li><p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量</p></li><li><p>如果变量名与属性名不一致，必须写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// 'hello'</span></span><br><span class="line">l <span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure></li><li><p>解构嵌套对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：p是模式，不是变量，因此不会被赋值。</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">p: [</span><br><span class="line"><span class="string">'Hello'</span>,</span><br><span class="line">&#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果p也要作为变量赋值，可以写成下面这样。</span></span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">const</span> [,[&#123;lang&#125;]] = [<span class="literal">null</span>, [&#123;<span class="attr">env</span>: <span class="string">'browser'</span>, <span class="attr">lang</span>: <span class="string">'ES6'</span>&#125;]];</span><br><span class="line">assert.equal(lang, <span class="string">'ES6'</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果解构模式是嵌套的对象，子对象所在的父属性必须存在，否则将会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo这时等于undefined，再取子属性就会报错。</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>: &#123;bar&#125;&#125; = &#123;<span class="attr">baz</span>: <span class="string">'baz'</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-特别注意"><a href="#4-特别注意" class="headerlink" title="4.特别注意"></a>4.特别注意</h4><ul><li><p>将一个已经声明的变量用于解构赋值要括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);  <span class="comment">//错误：&#123;x&#125; = &#123;x: 1&#125;;   ！！！！！！！！！！！&#123;x&#125;===&#123;x:x&#125;  简写法</span></span><br></pre></td></tr></table></figure></li><li><p>无意义写法：<code>({} = [true, false]);</code></p></li><li><p>可以对数组进行对象属性的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span> : first, [arr.length - <span class="number">1</span>] : last&#125; = arr;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-字符串解构"><a href="#5-字符串解构" class="headerlink" title="5.字符串解构"></a>5.字符串解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>; <span class="comment">//a='h',b='e'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>; <span class="comment">//len=5</span></span><br></pre></td></tr></table></figure><h4 id="6-数值和布尔值解构"><a href="#6-数值和布尔值解构" class="headerlink" title="6.数值和布尔值解构"></a>6.数值和布尔值解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p><h4 id="7-函数解构"><a href="#7-函数解构" class="headerlink" title="7.函数解构"></a>7.函数解构</h4><ul><li><p>解构传参，同时函数参数的解构也可以使用默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0,0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure></li><li><p>undefined就会触发函数参数的默认值。</p></li></ul><h4 id="8-圆括号"><a href="#8-圆括号" class="headerlink" title="8.圆括号"></a>8.圆括号</h4><ul><li><p>不能用圆括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//报错，变量声明语句，模式不能使用圆括号。</span></span><br><span class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数也属于变量声明，因此不能带有圆括号。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将整个模式放在圆括号之中，导致报错。</span></span><br><span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>能用圆括号的情况是赋值语句的非模式部分，比如<code>({ p: (d) } = {}); // 正确</code></p></li></ul><h4 id="9-解构用途"><a href="#9-解构用途" class="headerlink" title="9.解构用途"></a>9.解构用途</h4><ul><li><p>交换变量的值</p></li><li><p>从函数返回多个值</p></li><li><p>函数参数的定义</p></li><li><p>提取 JSON 数据</p></li><li><p>函数参数的默认值</p></li><li><p>遍历 Map 结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure></li><li><p>输入模块的指定方法</p></li></ul><h2 id="三、es6对象字面量"><a href="#三、es6对象字面量" class="headerlink" title="三、es6对象字面量"></a>三、es6对象字面量</h2><h4 id="1、属性简介表示法"><a href="#1、属性简介表示法" class="headerlink" title="1、属性简介表示法"></a>1、属性简介表示法</h4><ul><li><p>属性简介表示 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量简写</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;  <span class="comment">// 等同于   const baz = &#123;foo: foo&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数简写</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">method() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>属性的赋值器（setter）和取值器（getter）<br>如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cart = &#123;</span><br><span class="line">_wheels: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> wheels () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>._wheels;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> wheels (value) &#123;</span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="keyword">this</span>._wheels) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数值太小了！'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>._wheels = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：简洁写法的属性名总是字符串；如果某个方法的值是一个 Generator 函数，前面需要加上星号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">* m() &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、属性名表达式"><a href="#2、属性名表达式" class="headerlink" title="2、属性名表达式"></a>2、属性名表达式</h4><ul><li><p>作为对象的属性名，即把表达式放在方括号内。表达式还可以用于定义方法名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">'a'</span> + <span class="string">'bc'</span>] = <span class="number">123</span>; <span class="comment">//属性名此写法 is OK！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">[<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure></li><li><p>注意，属性名表达式与简洁表示法，不能同时使用，会报错。</p></li><li><p>属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]</p></li></ul><h2 id="四、Set数据结构"><a href="#四、Set数据结构" class="headerlink" title="四、Set数据结构"></a>四、Set数据结构</h2><ul><li><p>Set类似于数组，但是成员的值都是唯一的，没有重复的值。通过add()方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);<span class="comment">//支持传入数组</span></span><br><span class="line">items.size <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set(document.querySelectorAll('div'));  //支持传入具有 iterable 接口的其他数据结构</span><br><span class="line"><span class="keyword">set</span>.size // 56</span><br></pre></td></tr></table></figure></li><li><p>去除数组重复成员方法：<br>1) <code>[...new Set(array)]</code> （…）内部使用for…of循环<br>2) Array.from方法可以将 Set 结构转为数组</p></li><li><p>在 Set 内部，两个NaN是相等，undefined是有效的</p></li><li><p>在Set()内部两个对象总是不相等的，+0 0 -0总相等，’0’ 0是不相等的</p></li><li><p>Set实例属性有constructor和size；</p></li><li><p>Set实例方法add()、delete(value)返回布尔值是否删除成功、has(value)返回布尔值、clear()清除所有成员 返回undefined</p></li><li><p>Set有四种遍历操作：keys()，values()，entries()返回键和键值value 取值结束了done字段为true，返回遍历器对象，用let…of..。方法取值</p></li><li><p>Set同数组有forEach()方法，没有返回值，该方法参数为一个处理函数，依次为键值、键名、集合本身，Set 结构的键名就是键值（两者是同一个值）</p></li></ul><h2 id="五、函数扩展"><a href="#五、函数扩展" class="headerlink" title="五、函数扩展"></a>五、函数扩展</h2><h5 id="1、箭头函数-amp-amp-this指向"><a href="#1、箭头函数-amp-amp-this指向" class="headerlink" title="1、箭头函数 &amp;&amp; this指向"></a>1、箭头函数 &amp;&amp; this指向</h5><ul><li><p><code>function(a){return a;}  等价于  (a)=&gt;{return a;} 等价于 (a)=&gt;a</code></p></li><li><p>函数体内的this对象，就是定义时所在的对象，而不是运行时所在的对象。<br>参考链接：<a href="https://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/function</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s2++;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。</span></span><br><span class="line"><span class="comment">* 前者的this绑定定义时所在的作用域（即Timer函数），</span></span><br><span class="line"><span class="comment">* 后者的this指向运行时所在的作用域（即全局对象）。</span></span><br><span class="line"><span class="comment">* 所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。*/</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure><p>this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。</p></li><li><p>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p></li><li><p>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p></li><li><p>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p></li></ul><h4 id="2、参数设置"><a href="#2、参数设置" class="headerlink" title="2、参数设置"></a>2、参数设置</h4><p><strong>参数默认值</strong></p><ul><li><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。<br><code>function log(x, y = &#39;World&#39;) {}</code></p></li><li><p>参数变量是默认声明的，所以不能用let或const再次声明。</p></li><li><p>参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。</p></li><li><p>参数默认值可以与解构赋值的默认值，结合起来使用。<figure class="highlight plain"><figcaption><span>foo(&#123;x, y </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 解构默认值</span><br><span class="line">```js</span><br><span class="line">function fetch(url, &#123; body = &apos;&apos;, method = &apos;GET&apos;, headers = &#123;&#125; &#125;) &#123;&#125; //第二个参数不能省略</span><br><span class="line">function fetch(url, &#123; body = &apos;&apos;, method = &apos;GET&apos;, headers = &#123;&#125; &#125;=&#123;&#125;) &#123;&#125; //第二个参数可以省略</span><br></pre></td></tr></table></figure></p></li><li><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。否则，无法省略，除非显式输入undefined，null则没有这个效果。</p></li></ul><p><strong>函数length属性</strong></p><ul><li>指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。<br><code>(function (a, b, c = 5) {}).length // 2</code></li><li>length属性的含义是，该函数预期传入的参数个数。</li><li>rest 参数也不会计入length属性。</li></ul><h4 id="3、作用域"><a href="#3、作用域" class="headerlink" title="3、作用域"></a>3、作用域</h4><ul><li><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;  <span class="comment">//y后面的x指向第一个参数x</span></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x = x</span>) </span>&#123; <span class="comment">//x=x形成单独作用域，进入死区</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>可以将参数默认值设为undefined，表明这个参数是可以省略的。<code>function foo(optional = undefined) { ··· }</code></p></li><li><p><code>function foo(mustBeProvided = throwIfMissing()) {}</code><br>注意函数名throwIfMissing之后有一对圆括号，这表明参数的默认值不是在定义时执行，而是在运行时执行。</p></li></ul><h4 id="4、rest参数"><a href="#4、rest参数" class="headerlink" title="4、rest参数"></a>4、rest参数</h4><ul><li>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</li><li>rest参数是一个真数组，可使用数组的方法，而arguments对象不是数组，而是一个类似数组的对象。需用<code>Array.prototype.slice.call()</code>转为数组。</li><li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。 <code>function f(a, ...b, c) {}</code></li><li>函数的length属性，不包括 rest 参数。<code>(function(a, ...b) {}).length  // 1</code></li></ul><h2 id="六、字符串操作"><a href="#六、字符串操作" class="headerlink" title="六、字符串操作"></a>六、字符串操作</h2><p><strong>1、str.includes()</strong></p><ul><li><p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true </span></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></li><li><p>对大小写查找不敏感</p></li><li><p>如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。</p></li><li><p>如果第二个参数为undefined, 则会被转为0</p></li></ul><p><strong>2、str.repeat()</strong> 返回一个新字符串，表示将原字符串重复n次</p><ul><li>参数如果是小数，会被取整</li><li>如果repeat的参数是负数或者Infinity，会报错</li><li>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0</li><li>参数NaN等同于 0</li><li>如果repeat的参数是字符串，则会先转换成数字。若是空字符串，则返回空字符串’’</li><li>传入0，则返回空字符串’’</li></ul><p><strong>3、str.startsWith()</strong> 返回布尔值，表示参数字符串是否在原字符串的头部</p><ul><li>第一个参数表示要找的字符串</li><li>第二个参数表示从第n个位置直到字符串结束</li></ul><p><strong>3、str.endsWith()</strong>返回布尔值，表示参数字符串是否在原字符串的尾部。</p><ul><li>第一个参数表示要找的字符串，如果此参数为空字符串，返回true</li><li>第二个参数表示针对前n个字符，如果此参数为undefined，则返回true；如果此参数为负值，查找空字符串返回true，查找非空字符串返回false。</li></ul><p><strong>以上方法可以用于非字符串，但会先将非字符串变量转为字符串</strong></p><h2 id="七、模板字符串"><a href="#七、模板字符串" class="headerlink" title="七、模板字符串"></a>七、模板字符串</h2><ul><li><p>变量名写在${}</p></li><li><p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义</p></li><li><p>模板字符串之中还能调用函数</p></li><li><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串</p></li><li><p>tagFunction是函数名，（<code></code>）相当于数组左右括号，${}里面的内容不会被识别到，但分割了字符串，并且作为第二个参数传入函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one=<span class="number">1</span>,two=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstValueOnly</span>(<span class="params">strings, firstValue, secondValue</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> strings; <span class="comment">//["uno ", ", dos ", ""]</span></span><br><span class="line"><span class="comment">//return firstValue; //1</span></span><br><span class="line"><span class="comment">//return secondValue;//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(firstValueOnly<span class="string">`uno <span class="subst">$&#123;one&#125;</span>, dos <span class="subst">$&#123;two&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>String.raw<code>\\</code></strong><br>是用来获取一个模板字符串的原始字符串的，比如说，占位符（例如 ${foo}）会被处理为它所代表的其他字符串，而转义字符（例如 \n）不会。</p></li></ul><h2 id="八、提交作业方式"><a href="#八、提交作业方式" class="headerlink" title="八、提交作业方式"></a>八、提交作业方式</h2><p>本地自己创建一个develop分支，然后关联远程分支，然后将本地develop分支将代码提交到远程分支origin/develop</p><h5 id="git-pull-add-commit…之后"><a href="#git-pull-add-commit…之后" class="headerlink" title="git pull add commit…之后"></a>git pull add commit…之后</h5><h5 id="如果没有看到你想要的分支-先获取所有分支"><a href="#如果没有看到你想要的分支-先获取所有分支" class="headerlink" title="如果没有看到你想要的分支,先获取所有分支:"></a>如果没有看到你想要的分支,先获取所有分支:</h5><p>$ git fetch</p><h5 id="本地创建分支"><a href="#本地创建分支" class="headerlink" title="本地创建分支"></a>本地创建分支</h5><p>$ git checkout -b develop</p><h5 id="建立分支映射关系"><a href="#建立分支映射关系" class="headerlink" title="建立分支映射关系"></a>建立分支映射关系</h5><p>$ git branch -u origin/develop develop</p><h5 id="列出所有本地分支"><a href="#列出所有本地分支" class="headerlink" title="列出所有本地分支"></a>列出所有本地分支</h5><p>$ git branch</p><h5 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h5><p>$ git branch -r</p><h5 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h5><p>$ git branch -a</p><h5 id="拉取远程代码"><a href="#拉取远程代码" class="headerlink" title="拉取远程代码"></a>拉取远程代码</h5><p>$ git pull</p><h5 id="提交本地代码"><a href="#提交本地代码" class="headerlink" title="提交本地代码"></a>提交本地代码</h5><p>$ git push </p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-10</title>
      <link href="/2019/07/10/2019-07-10/"/>
      <url>/2019/07/10/2019-07-10/</url>
      
        <content type="html"><![CDATA[<p><strong>es6数字类型操作</strong>：Number.isInteger()、Number.isNaN()；<br><strong>es6数组常用操作</strong>：find()、findIndex()、fill()、copyWithin()、from()、of()、entires()、values()、keys()、includes()；<br><strong>使用Hexo搭建博客并部署到github上</strong>：基本环境、搭建网站、托管gitPages；<br><strong>Mocha测试实例教程</strong></p><a id="more"></a><h2 id="一、es6数字类型操作"><a href="#一、es6数字类型操作" class="headerlink" title="一、es6数字类型操作"></a>一、es6数字类型操作</h2><ul><li><p><strong>Number.isInteger()</strong><br>方法用来判断给定的参数是否为整数。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">6</span>/<span class="number">3</span>)); <span class="comment">// True</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">6</span>/<span class="number">4</span>)); <span class="comment">// False</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.isNaN()</strong><br>方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>));        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>.NaN)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 0 / 0的结果就是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0</span> / <span class="number">0</span>))       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这几个如果使用全局的 isNaN() 时，会返回 true, 但是Number.isNaN()不会。</span></span><br><span class="line"><span class="comment">// Number.isNaN(x)要求x类型必须为Number才能返回true.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>));      <span class="comment">// false，字符串 "NaN" 不会被隐式转换成数字 NaN。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">undefined</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(&#123;&#125;));         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"blabla"</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 对无穷大判断也是false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">Infinity</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 5/0是Infinity,不是NaN.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">5</span> / <span class="number">0</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的都返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">true</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">37</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"37"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"37.37"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">""</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">" "</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、es6数组常用操作"><a href="#二、es6数组常用操作" class="headerlink" title="二、es6数组常用操作"></a>二、es6数组常用操作</h2><ul><li><p><strong>find()</strong><br>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">"2"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">typeof</span> n === <span class="string">"number"</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>findIndex()</strong><br>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，终止搜索。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">"2"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">typeof</span> n === <span class="string">"number"</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>fill()</strong><br>用新元素替换掉数组内的元素，可以指定替换下标范围。[start,end) 左闭右开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr.fill(value, start, end);</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.fill(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//  [ 1, 2, 0, 0, 5, 6, 7]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>copyWithin()</strong><br>选择数组的某个下标，从该位置开始复制数组元素，默认从0开始复制。也可以指定要复制的元素范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target, start, end)</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>))</span><br><span class="line"> <span class="comment">// [1,2,3,1,2] 从下标为3的元素开始，复制数组，所以4, 5被替换成1, 2</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.copyWithin(<span class="number">3</span>, <span class="number">1</span>)) </span><br><span class="line"><span class="comment">// [1,2,3,2,3] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，所以4, 5被替换成2, 3</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2.copyWithin(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)) </span><br><span class="line"><span class="comment">// [1,2,3,2,5] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，结束位置为2，所以4被替换成2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>from()</strong><br>将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">Array</span>.from(bar);</span><br><span class="line"><span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>of()</strong><br>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>entires()</strong> let o fo arr.entires()<br>返回迭代器：返回键值对  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.entires());  <span class="comment">// 输出： Array Iterator &#123; &#125; 对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a'] [1, 'b'] [2, 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr.entires());  <span class="comment">// 输出： SetIterator &#123; &#125; &#123;"a" =&gt; "a", "b" =&gt; "b", "c" =&gt; "c"&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ['a', 'a'] ['b', 'b'] ['c', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</span><br><span class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.entires());  <span class="comment">// 输出： MapIterator &#123; &#125; &#123;"a" =&gt; "a", "b" =&gt; "b"&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ['a', 'a'] ['b', 'b']</span></span><br></pre></td></tr></table></figure></li><li><p><strong>values()</strong><br>返回迭代器：返回键值对的value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.values());  <span class="comment">// 输出： Array Iterator &#123; &#125; 对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//'a' 'b' 'c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr.values());  <span class="comment">// 输出： SetIterator &#123; "a","b","c"&#125; </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a' 'b' 'c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</span><br><span class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.values());  <span class="comment">// 输出：MapIterator &#123; "a","b"&#125; </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a' 'b'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>keys()</strong><br>返回迭代器：返回键值对的key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.keys());  <span class="comment">// 输出： Array Iterator &#123; &#125; 对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a' 'b' 'c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</span><br><span class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a' 'b'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>includes()</strong><br>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">a.includes(<span class="number">4</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、使用Hexo搭建博客并部署到github上"><a href="#三、使用Hexo搭建博客并部署到github上" class="headerlink" title="三、使用Hexo搭建博客并部署到github上"></a>三、使用Hexo搭建博客并部署到github上</h2><p>参考链接：<br>    - <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">官方文档</a><br>    - <a href="https://blog.csdn.net/nightmare_dimple/article/details/86661465" target="_blank" rel="noopener">利用Hexo将博客部署到GitPages和CodingPages</a></p><h5 id="1、基本环境"><a href="#1、基本环境" class="headerlink" title="1、基本环境"></a>1、基本环境</h5><ul><li>安装 node.js</li><li>安装 git</li><li>打开 git bash, 运行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h5 id="2、搭建网站"><a href="#2、搭建网站" class="headerlink" title="2、搭建网站"></a>2、搭建网站</h5><ul><li><strong>初始化站点</strong><br>1）新建一个文件夹<code>hexo-blog</code>,进入该目录，右击打开 git bash , 运行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用：将远端的hexo文件克隆到hexo-blog博客目录下</span></span><br><span class="line"></span><br><span class="line">$ hexo init  <span class="comment">//将全部文件放置到当前hexo-blog文件夹下</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">$ hexo init blog <span class="comment">//将文件都放到blog目录下，文件夹下多出 blog文件夹 和 package.json</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>安装依赖</strong><br>进入blog目录，运行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ul><p>  安装完成后博客 hexo-blog 文件夹目录如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|—— node_modules  <span class="comment">//利用npm install --save下载安装的软件</span></span><br><span class="line">|—— scaffolds <span class="comment">//存放的是各种脚手架模板，也就是说可以创建post、page、draft三种页面</span></span><br><span class="line">|—— source  <span class="comment">//资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</span></span><br><span class="line">||—— _posts</span><br><span class="line">|—— themes <span class="comment">//主题 文件夹。Hexo 会根据主题来生成静态页面。</span></span><br><span class="line">||—— landscape</span><br><span class="line">|—— .gitignore <span class="comment">//存放的是我们部署到github或者coding.me上时需要忽略的文件</span></span><br><span class="line">|—— _config.yml <span class="comment">//站点配置文件</span></span><br><span class="line">|—— db.json</span><br><span class="line">|—— package.json <span class="comment">//应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</span></span><br></pre></td></tr></table></figure><ul><li><strong>创建页面</strong><br>在hexo-blog文件夹下运行以下代码，然后在网页输入<code>http://localhost:4000</code>就可看到 hello world 页面。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean; <span class="comment">//清空站点静态页面缓存</span></span><br><span class="line">$ hexo generate; <span class="comment">//在本地生成静态页面（在public文件夹下）</span></span><br><span class="line">$ hexo server; <span class="comment">//开启本地服务器</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、托管gitPages"><a href="#3、托管gitPages" class="headerlink" title="3、托管gitPages"></a>3、托管gitPages</h5><ul><li><p><strong>window配置github环境</strong></p><p>  1）注册github账号</p><p>  2）ssh环境配置<br>  因为创建个人博客需要用到自己的github，但公司也用了gitlab，所以需要配置多个ssh.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置全局账户邮箱，用于公司密钥</span></span><br><span class="line">$ git config --global user.name <span class="string">"name"</span>  </span><br><span class="line">$ git config --global user.email <span class="string">"email"</span> </span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"1email@company.com” -f ~/.ssh/id_rsa </span></span><br><span class="line"><span class="string">//将生成的 id_rsa.pub 内容赋值粘贴到gitLab上个人中心settings的ssh key</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//配置个人账户邮箱，用于私有密钥，在hexo-blog项目下配置</span></span><br><span class="line"><span class="string">$ git config user.name "</span>name<span class="string">"  </span></span><br><span class="line"><span class="string">$ git config user.email "</span>email<span class="string">" </span></span><br><span class="line"><span class="string">$ ssh-keygen -t rsa -C "</span><span class="number">2</span>email@github.com” -f ~<span class="regexp">/.ssh/gi</span>thub_rsa</span><br><span class="line"><span class="comment">//将生成的 id_rsa.pub 内容赋值粘贴到gitLab上个人中心settings的ssh key</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>新建repository</strong><br>  在自己的个人github上创建一个repository, 命名为 “github-username.github.io”</p><p>  1）一定要跟自己的用户名相同；</p><p>  2）记得输入github.io后缀</p><p>  3）创建成功后，在 repository 的 settings 下的 GitHub  Pages模块，设置 “master branch” ,然后就可以看到自己的访问地址，类似 <a href="https://CMR.github.io/" target="_blank" rel="noopener">https://CMR.github.io/</a></p></li></ul><ul><li><strong>Hexo配置</strong></li></ul><p>1）在hexo-blog文件夹下，运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2）配置hexo-blog/_config.yml</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: </span><br><span class="line">github: https:<span class="comment">//github.com/nightmaredimple/nightmaredimple.github.io.git</span></span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>3）将hexo-blog文件上传到新建的repository上</p><ul><li><strong>部署完成</strong></li></ul><p>1）在hexo-blog文件夹下运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;</span><br><span class="line">hexo g;</span><br><span class="line">hexo d;</span><br></pre></td></tr></table></figure><p>2）愉快的查看自己的博克啦<del>~</del></p><p>我的是<a href="http://957739315.github.io">http://957739315.github.io</a></p><h2 id="四、Mocha测试实例教程"><a href="#四、Mocha测试实例教程" class="headerlink" title="四、Mocha测试实例教程"></a>四、Mocha测试实例教程</h2><p>参考链接：<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
